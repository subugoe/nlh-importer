<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<!--
     For more details about configurations options that may appear in
     this file, see http://wiki.apache.org/solr/SolrConfigXml.
-->
<config>
    <!-- In all configuration below, a prefix of "solr." for class names
         is an alias that causes solr to search appropriate packages,
         including org.apache.solr.(search|update|request|core|analysis)

         You may also specify a fully qualified Java classname if you
         have your own custom plugins.
      -->

    <!-- Controls what version of Lucene various components of Solr
         adhere to.  Generally, you want to use the latest version to
         get all bug fixes and improvements. It is highly recommended
         that you fully re-index after changing this setting as it can
         affect both how text is indexed and queried.
    -->
    <luceneMatchVersion>6.5.1</luceneMatchVersion>

    <!-- <lib/> directives can be used to instruct Solr to load any Jars
         identified and use them to resolve any "plugins" specified in
         your solrconfig.xml or schema.xml (ie: Analyzers, Request
         Handlers, etc...).

         All directories and paths are resolved relative to the
         instanceDir.

         Please note that <lib/> directives are processed in the order
         that they appear in your solrconfig.xml file, and are "stacked"
         on top of each other when building a ClassLoader - so if you have
         plugin jars with dependencies on other jars, the "lower level"
         dependency jars should be loaded first.

         If a "./lib" directory exists in your instanceDir, all files
         found in it are included as if you had used the following
         syntax...

                <lib dir="./lib" />
      -->

    <!-- A 'dir' option by itself adds any files found in the directory
         to the classpath, this is useful for including all jars in a
         directory.

         When a 'regex' is specified in addition to a 'dir', only the
         files in that directory which completely match the regex
         (anchored on both ends) will be included.

         If a 'dir' option (with or without a regex) is used and nothing
         is found that matches, a warning will be logged.

         The examples below can be used to load some solr-contribs along
         with their external dependencies.
      -->
    <lib dir="${solr.install.dir:../../..}/contrib/extraction/lib" regex=".*\.jar"/>
    <lib dir="${solr.install.dir:../../..}/dist/" regex="solr-cell-\d.*\.jar"/>

    <lib dir="${solr.install.dir:../../..}/contrib/clustering/lib/" regex=".*\.jar"/>
    <lib dir="${solr.install.dir:../../..}/dist/" regex="solr-clustering-\d.*\.jar"/>

    <lib dir="${solr.install.dir:../../..}/contrib/langid/lib/" regex=".*\.jar"/>
    <lib dir="${solr.install.dir:../../..}/dist/" regex="solr-langid-\d.*\.jar"/>

    <lib dir="${solr.install.dir:../../..}/contrib/velocity/lib" regex=".*\.jar"/>
    <lib dir="${solr.install.dir:../../..}/dist/" regex="solr-velocity-\d.*\.jar"/>

    <!-- an exact 'path' can be used instead of a 'dir' to specify a
         specific jar file.  This will cause a serious error to be logged
         if it can't be loaded.
      -->
    <!--
       <lib path="../a-jar-that-does-not-exist.jar" />
    -->

    <!-- Data Directory

         Used to specify an alternate directory to hold all index data
         other than the default ./data under the Solr home.  If
         replication is in use, this should match the replication
         configuration.
      -->
    <dataDir>${solr.data.dir:}</dataDir>


    <!-- The DirectoryFactory to use for indexes.

         solr.StandardDirectoryFactory is filesystem
         based and tries to pick the best implementation for the current
         JVM and platform.  solr.NRTCachingDirectoryFactory, the default,
         wraps solr.StandardDirectoryFactory and caches small files in memory
         for better NRT performance.

         One can force a particular implementation via solr.MMapDirectoryFactory,
         solr.NIOFSDirectoryFactory, or solr.SimpleFSDirectoryFactory.

         solr.RAMDirectoryFactory is memory based, not
         persistent, and doesn't work with replication.
      -->
    <directoryFactory name="DirectoryFactory"
                      class="${solr.directoryFactory:solr.NRTCachingDirectoryFactory}">


        <!-- These will be used if you are using the solr.HdfsDirectoryFactory,
             otherwise they will be ignored. If you don't plan on using hdfs,
             you can safely remove this section. -->
        <!-- The root directory that collection data should be written to. -->
        <str name="solr.hdfs.home">${solr.hdfs.home:}</str>
        <!-- The hadoop configuration files to use for the hdfs client. -->
        <str name="solr.hdfs.confdir">${solr.hdfs.confdir:}</str>
        <!-- Enable/Disable the hdfs cache. -->
        <str name="solr.hdfs.blockcache.enabled">${solr.hdfs.blockcache.enabled:true}</str>
        <!-- Enable/Disable using one global cache for all SolrCores.
             The settings used will be from the first HdfsDirectoryFactory created. -->
        <str name="solr.hdfs.blockcache.global">${solr.hdfs.blockcache.global:true}</str>

    </directoryFactory>

    <!-- The CodecFactory for defining the format of the inverted index.
         The default implementation is SchemaCodecFactory, which is the official Lucene
         index format, but hooks into the schema to provide per-field customization of
         the postings lists and per-document values in the fieldType element
         (postingsFormat/docValuesFormat). Note that most of the alternative implementations
         are experimental, so if you choose to customize the index format, its a good
         idea to convert back to the official format e.g. via IndexWriter.addIndexes(IndexReader)
         before upgrading to a newer version to avoid unnecessary reindexing.
    -->
    <codecFactory class="solr.SchemaCodecFactory"/>

    <!-- To enable dynamic schema REST APIs, use the following for <schemaFactory>:

         <schemaFactory class="ManagedIndexSchemaFactory">
           <bool name="mutable">true</bool>
           <str name="managedSchemaResourceName">managed-schema</str>
         </schemaFactory>

         When ManagedIndexSchemaFactory is specified, Solr will load the schema from
         he resource named in 'managedSchemaResourceName', rather than from schema.xml.
         Note that the managed schema resource CANNOT be named schema.xml.  If the managed
         schema does not exist, Solr will create it after reading schema.xml, then rename
         'schema.xml' to 'schema.xml.bak'.

         Do NOT hand edit the managed schema - external modifications will be ignored and
         overwritten as a result of schema modification REST API calls.

         When ManagedIndexSchemaFactory is specified with mutable = true, schema
         modification REST API calls will be allowed; otherwise, error responses will be
         sent back for these requests.
    -->
    <schemaFactory class="ClassicIndexSchemaFactory"/>

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         Index Config - These settings control low-level behavior of indexing
         Most example settings here show the default value, but are commented
         out, to more easily see where customizations have been made.

         Note: This replaces <indexDefaults> and <mainIndex> from older versions
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <indexConfig>
        <!-- maxFieldLength was removed in 4.0. To get similar behavior, include a
             LimitTokenCountFilterFactory in your fieldType definition. E.g.
         <filter class="solr.LimitTokenCountFilterFactory" maxTokenCount="10000"/>
        -->
        <!-- Maximum time to wait for a write lock (ms) for an IndexWriter. Default: 1000 -->
        <writeLockTimeout>30000</writeLockTimeout>

        <!-- The maximum number of simultaneous threads that may be
             indexing documents at once in IndexWriter; if more than this
             many threads arrive they will wait for others to finish.
             Default in Solr/Lucene is 8. -->
        <maxIndexingThreads>8</maxIndexingThreads>

        <!-- Expert: Enabling compound file will use less files for the index,
             using fewer file descriptors on the expense of performance decrease.
             Default in Lucene is "true". Default in Solr is "false" (since 3.6) -->
        <!-- <useCompoundFile>false</useCompoundFile> -->

        <!-- ramBufferSizeMB sets the amount of RAM that may be used by Lucene
             indexing for buffering added documents and deletions before they are
             flushed to the Directory.
             maxBufferedDocs sets a limit on the number of documents buffered
             before flushing.
             If both ramBufferSizeMB and maxBufferedDocs is set, then
             Lucene will flush based on whichever limit is hit first.
             The default is 100 MB.  -->
        <!-- <ramBufferSizeMB>100</ramBufferSizeMB> -->
        <!-- <maxBufferedDocs>1000</maxBufferedDocs> -->

        <!-- Expert: Merge Policy
             The Merge Policy in Lucene controls how merging of segments is done.
             The default since Solr/Lucene 3.3 is TieredMergePolicy.
             The default since Lucene 2.3 was the LogByteSizeMergePolicy,
             Even older versions of Lucene used LogDocMergePolicy.
          -->
        <!--
            <mergePolicy class="org.apache.lucene.index.TieredMergePolicy">
              <int name="maxMergeAtOnce">10</int>
              <int name="segmentsPerTier">10</int>
            </mergePolicy>
          -->

        <!-- Merge Factor
             The merge factor controls how many segments will get merged at a time.
             For TieredMergePolicy, mergeFactor is a convenience parameter which
             will set both MaxMergeAtOnce and SegmentsPerTier at once.
             For LogByteSizeMergePolicy, mergeFactor decides how many new segments
             will be allowed before they are merged into one.
             Default is 10 for both merge policies.
          -->
        <!--
        <mergeFactor>10</mergeFactor>
          -->

        <!-- Expert: Merge Scheduler
             The Merge Scheduler in Lucene controls how merges are
             performed.  The ConcurrentMergeScheduler (Lucene 2.3 default)
             can perform merges in the background using separate threads.
             The SerialMergeScheduler (Lucene 2.2 default) does not.
         -->
        <!--
           <mergeScheduler class="org.apache.lucene.index.ConcurrentMergeScheduler"/>
           -->

        <!-- LockFactory

             This option specifies which Lucene LockFactory implementation
             to use.

             single = SingleInstanceLockFactory - suggested for a
                      read-only index or when there is no possibility of
                      another process trying to modify the index.
             native = NativeFSLockFactory - uses OS native file locking.
                      Do not use when multiple solr webapps in the same
                      JVM are attempting to share a single index.
             simple = SimpleFSLockFactory  - uses a plain file for locking

             Defaults: 'native' is default for Solr3.6 and later, otherwise
                       'simple' is the default

             More details on the nuances of each LockFactory...
             http://wiki.apache.org/lucene-java/AvailableLockFactories
        -->
        <lockType>${solr.lock.type:simple}</lockType>


        <!-- Unlock On Startup

             If true, unlock any held write or commit locks on startup.
             This defeats the locking mechanism that allows multiple
             processes to safely access a lucene index, and should be used
             with care. Default is "false".

             This is not needed if lock type is 'single'
         -->

        <!--<unlockOnStartup>false</unlockOnStartup>-->


        <!-- Expert: Controls how often Lucene loads terms into memory
             Default is 128 and is likely good for most everyone.
          -->
        <!-- <termIndexInterval>128</termIndexInterval> -->

        <!--<reopenReaders>false</reopenReaders>-->

        <!-- If true, IndexReaders will be opened/reopened from the IndexWriter
             instead of from the Directory. Hosts in a master/slave setup
             should have this set to false while those in a SolrCloud
             cluster need to be set to true. Default: true
          -->
        <!--
        <nrtMode>true</nrtMode>
          -->

        <!-- Commit Deletion Policy
             Custom deletion policies can be specified here. The class must
             implement org.apache.lucene.index.IndexDeletionPolicy.

             The default Solr IndexDeletionPolicy implementation supports
             deleting index commit points on number of commits, age of
             commit point and optimized status.

             The latest commit point should always be preserved regardless
             of the criteria.
        -->
        <!--
        <deletionPolicy class="solr.SolrDeletionPolicy">
        -->
        <!-- The number of commit points to be kept -->
        <!-- <str name="maxCommitsToKeep">1</str> -->
        <!-- The number of optimized commit points to be kept -->
        <!-- <str name="maxOptimizedCommitsToKeep">0</str> -->
        <!--
            Delete all commit points once they have reached the given age.
            Supports DateMathParser syntax e.g.
          -->
        <!--
           <str name="maxCommitAge">30MINUTES</str>
           <str name="maxCommitAge">1DAY</str>
        -->
        <!--
        </deletionPolicy>
        -->

        <!-- Lucene Infostream

             To aid in advanced debugging, Lucene provides an "InfoStream"
             of detailed information when indexing.

             Setting the value to true will instruct the underlying Lucene
             IndexWriter to write its info stream to solr's log. By default,
             this is enabled here, and controlled through log4j.properties.
          -->
        <infoStream>true</infoStream>

        <!--
            Use true to enable this safety check, which can help
            reduce the risk of propagating index corruption from older segments
            into new ones, at the expense of slower merging.
        -->
        <!-- <checkIntegrityAtMerge>false</checkIntegrityAtMerge> -->
    </indexConfig>

    <!-- Common parameters for the custom search handlers -->
    <initParams path="/search,/facets,/fulltext,/query,/select">
        <lst name="defaults">
            <str name="omitHeader">false</str>
            <str name="echoParams">all</str>
            <str name="wt">json</str>
            <int name="timeAllowed">25000</int>
        </lst>
    </initParams>


    <!-- JMX

         This example enables JMX if and only if an existing MBeanServer
         is found, use this if you want to configure JMX through JVM
         parameters. Remove this to disable exposing Solr configuration
         and statistics to JMX.

         For more details see http://wiki.apache.org/solr/SolrJmx
      -->
    <jmx/>
    <!-- If you want to connect to a particular server, specify the
         agentId
      -->
    <!-- <jmx agentId="myAgent" /> -->
    <!-- If you want to start a new MBeanServer, specify the serviceUrl -->
    <!-- <jmx serviceUrl="service:jmx:rmi:///jndi/rmi://localhost:9999/solr"/>
      -->

    <!-- The default high-performance update handler -->
    <updateHandler class="solr.DirectUpdateHandler2">

        <!-- Enables a transaction log, used for real-time get, durability, and
             and solr cloud replica recovery.  The log can grow as big as
             uncommitted changes to the index, so use of a hard autoCommit
             is recommended (see below).
             "dir" - the target directory for transaction logs, defaults to the
                    solr data directory.  -->
        <updateLog>
            <str name="dir">${solr.ulog.dir:}</str>
        </updateLog>

        <!-- AutoCommit

             Perform a hard commit automatically under certain conditions.
             Instead of enabling autoCommit, consider using "commitWithin"
             when adding documents.

             http://wiki.apache.org/solr/UpdateXmlMessages

             maxDocs - Maximum number of documents to add since the last
                       commit before automatically triggering a new commit.

             maxTime - Maximum amount of time in ms that is allowed to pass
                       since a document was added before automatically
                       triggering a new commit.
             openSearcher - if false, the commit causes recent index changes
               to be flushed to stable storage, but does not cause a new
               searcher to be opened to make those changes visible.

             If the updateLog is enabled, then it's highly recommended to
             have some sort of hard autoCommit to limit the log size.
          -->
        <autoCommit>
            <maxTime>${solr.autoCommit.maxTime:15000}</maxTime>
            <openSearcher>false</openSearcher>
        </autoCommit>

        <!-- softAutoCommit is like autoCommit except it causes a
             'soft' commit which only ensures that changes are visible
             but does not ensure that data is synced to disk.  This is
             faster and more near-realtime friendly than a hard commit.
          -->

        <!--    <autoSoftCommit>
              <maxTime>${solr.autoSoftCommit.maxTime:-1}</maxTime>
            </autoSoftCommit>
        -->
        <autoSoftCommit>
            <maxTime>1000</maxTime>
        </autoSoftCommit>

        <!-- Update Related Event Listeners

             Various IndexWriter related events can trigger Listeners to
             take actions.

             postCommit - fired after every commit or optimize command
             postOptimize - fired after every optimize command
          -->
        <!-- The RunExecutableListener executes an external command from a
             hook such as postCommit or postOptimize.

             exe - the name of the executable to run
             dir - dir to use as the current working directory. (default=".")
             wait - the calling thread waits until the executable returns.
                    (default="true")
             args - the arguments to pass to the program.  (default is none)
             env - environment variables to set.  (default is none)
          -->
        <!-- This example shows how RunExecutableListener could be used
             with the script based replication...
             http://wiki.apache.org/solr/CollectionDistribution
          -->
        <!--
           <listener event="postCommit" class="solr.RunExecutableListener">
             <str name="exe">solr/bin/snapshooter</str>
             <str name="dir">.</str>
             <bool name="wait">true</bool>
             <arr name="args"> <str>arg1</str> <str>arg2</str> </arr>
             <arr name="env"> <str>MYVAR=val1</str> </arr>
           </listener>
          -->

    </updateHandler>

    <!-- IndexReaderFactory

         Use the following format to specify a custom IndexReaderFactory,
         which allows for alternate IndexReader implementations.

         ** Experimental Feature **

         Please note - Using a custom IndexReaderFactory may prevent
         certain other features from working. The API to
         IndexReaderFactory may change without warning or may even be
         removed from future releases if the problems cannot be
         resolved.


         ** Features that may not work with custom IndexReaderFactory **

         The ReplicationHandler assumes a disk-resident index. Using a
         custom IndexReader implementation may cause incompatibility
         with ReplicationHandler and may cause replication to not work
         correctly. See SOLR-1366 for details.

      -->
    <!--
    <indexReaderFactory name="IndexReaderFactory" class="package.class">
      <str name="someArg">Some Value</str>
    </indexReaderFactory >
    -->
    <!-- By explicitly declaring the Factory, the termIndexDivisor can
         be specified.
      -->
    <!--
       <indexReaderFactory name="IndexReaderFactory"
                           class="solr.StandardIndexReaderFactory">
         <int name="setTermIndexDivisor">12</int>
       </indexReaderFactory >
      -->

    <!-- ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
         Query section - these settings control query time things like caches
         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
    <query>
        <!-- Max Boolean Clauses

             Maximum number of clauses in each BooleanQuery,  an exception
             is thrown if exceeded.

             ** WARNING **

             This option actually modifies a global Lucene property that
             will affect all SolrCores.  If multiple solrconfig.xml files
             disagree on this property, the value at any given moment will
             be based on the last SolrCore to be initialized.

          -->
        <!--<maxBooleanClauses>1024</maxBooleanClauses>-->
        <maxBooleanClauses>20000</maxBooleanClauses>

        <!-- Solr Internal Query Caches

             There are two implementations of cache available for Solr,
             LRUCache, based on a synchronized LinkedHashMap, and
             FastLRUCache, based on a ConcurrentHashMap.

             FastLRUCache has faster gets and slower puts in single
             threaded operation and thus is generally faster than LRUCache
             when the hit ratio of the cache is high (> 75%), and may be
             faster under other scenarios on multi-cpu systems.
        -->

        <!-- Filter Cache

             Cache used by SolrIndexSearcher for filters (DocSets),
             unordered sets of *all* documents that match a query.  When a
             new searcher is opened, its caches may be prepopulated or
             "autowarmed" using data from caches in the old searcher.
             autowarmCount is the number of items to prepopulate.  For
             LRUCache, the autowarmed items will be the most recently
             accessed items.

             Parameters:
               class - the SolrCache implementation LRUCache or
                   (LRUCache or FastLRUCache)
               size - the maximum number of entries in the cache
               initialSize - the initial capacity (number of entries) of
                   the cache.  (see java.util.HashMap)
               autowarmCount - the number of entries to prepopulate from
                   and old cache.
          -->
        <filterCache class="solr.FastLRUCache"
                     size="512"
                     initialSize="512"
                     autowarmCount="0"/>

        <!-- Query Result Cache

             Caches results of searches - ordered lists of document ids
             (DocList) based on a query, a sort, and the range of documents requested.
          -->
        <queryResultCache class="solr.LRUCache"
                          size="512"
                          initialSize="512"
                          autowarmCount="0"/>

        <!-- Document Cache

             Caches Lucene Document objects (the stored fields for each
             document).  Since Lucene internal document ids are transient,
             this cache will not be autowarmed.
          -->
        <documentCache class="solr.LRUCache"
                       size="512"
                       initialSize="512"
                       autowarmCount="0"/>

        <!-- custom cache currently used by block join -->
        <cache name="perSegFilter"
               class="solr.search.LRUCache"
               size="10"
               initialSize="0"
               autowarmCount="10"
               regenerator="solr.NoOpRegenerator"/>

        <!-- Field Value Cache

             Cache used to hold field values that are quickly accessible
             by document id.  The fieldValueCache is created by default
             even if not configured here.
          -->
        <!--
           <fieldValueCache class="solr.FastLRUCache"
                            size="512"
                            autowarmCount="128"
                            showItems="32" />
          -->

        <!-- Custom Cache

             Example of a generic cache.  These caches may be accessed by
             name through SolrIndexSearcher.getCache(),cacheLookup(), and
             cacheInsert().  The purpose is to enable easy caching of
             user/application level data.  The regenerator argument should
             be specified as an implementation of solr.CacheRegenerator
             if autowarming is desired.
          -->
        <!--
           <cache name="myUserCache"
                  class="solr.LRUCache"
                  size="4096"
                  initialSize="1024"
                  autowarmCount="1024"
                  regenerator="com.mycompany.MyRegenerator"
                  />
          -->


        <!-- Lazy Field Loading

             If true, stored fields that are not requested will be loaded
             lazily.  This can result in a significant speed improvement
             if the usual case is to not load all stored fields,
             especially if the skipped fields are large compressed text
             fields.
        -->
        <enableLazyFieldLoading>true</enableLazyFieldLoading>

        <!-- Use Filter For Sorted Query

             A possible optimization that attempts to use a filter to
             satisfy a search.  If the requested sort does not include
             score, then the filterCache will be checked for a filter
             matching the query. If found, the filter will be used as the
             source of document ids, and then the sort will be applied to
             that.

             For most situations, this will not be useful unless you
             frequently get the same search repeatedly with different sort
             options, and none of them ever use "score"
          -->
        <!--
           <useFilterForSortedQuery>true</useFilterForSortedQuery>
          -->

        <!-- Result Window Size

             An optimization for use with the queryResultCache.  When a search
             is requested, a superset of the requested number of document ids
             are collected.  For example, if a search for a particular query
             requests matching documents 10 through 19, and queryWindowSize is 50,
             then documents 0 through 49 will be collected and cached.  Any further
             requests in that range can be satisfied via the cache.
          -->
        <queryResultWindowSize>20</queryResultWindowSize>

        <!-- Maximum number of documents to cache for any entry in the
             queryResultCache.
          -->
        <queryResultMaxDocsCached>200</queryResultMaxDocsCached>

        <!-- Query Related Event Listeners

             Various IndexSearcher related events can trigger Listeners to
             take actions.

             newSearcher - fired whenever a new searcher is being prepared
             and there is a current searcher handling requests (aka
             registered).  It can be used to prime certain caches to
             prevent long request times for certain requests.

             firstSearcher - fired whenever a new searcher is being
             prepared but there is no current registered searcher to handle
             requests or to gain autowarming data from.


          -->
        <!-- QuerySenderListener takes an array of NamedList and executes a
             local query request for each NamedList in sequence.
          -->
        <listener event="newSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <!--
                   <lst><str name="q">solr</str><str name="sort">price asc</str></lst>
                   <lst><str name="q">rocks</str><str name="sort">weight asc</str></lst>
                  -->
            </arr>
        </listener>
        <listener event="firstSearcher" class="solr.QuerySenderListener">
            <arr name="queries">
                <lst>
                    <str name="q">static firstSearcher warming in solrconfig.xml</str>
                </lst>
            </arr>
        </listener>

        <!-- Use Cold Searcher

             If a search request comes in and there is no current
             registered searcher, then immediately register the still
             warming searcher and use it.  If "false" then all requests
             will block until the first searcher is done warming.
          -->
        <useColdSearcher>false</useColdSearcher>

        <!-- Max Warming Searchers

             Maximum number of searchers that may be warming in the
             background concurrently.  An error is returned if this limit
             is exceeded.

             Recommend values of 1-2 for read-only slaves, higher for
             masters w/o cache warming.
          -->
        <maxWarmingSearchers>2</maxWarmingSearchers>

    </query>


    <!-- Request Dispatcher

         This section contains instructions for how the SolrDispatchFilter
         should behave when processing requests for this SolrCore.

         handleSelect is a legacy option that affects the behavior of requests
         such as /select?qt=XXX

         handleSelect="true" will cause the SolrDispatchFilter to process
         the request and dispatch the query to a handler specified by the
         "qt" param, assuming "/select" isn't already registered.

         handleSelect="false" will cause the SolrDispatchFilter to
         ignore "/select" requests, resulting in a 404 unless a handler
         is explicitly registered with the name "/select"

         handleSelect="true" is not recommended for new users, but is the default
         for backwards compatibility
      -->
    <requestDispatcher handleSelect="false">
        <!-- Request Parsing

             These settings indicate how Solr Requests may be parsed, and
             what restrictions may be placed on the ContentStreams from
             those requests

             enableRemoteStreaming - enables use of the stream.file
             and stream.url parameters for specifying remote streams.

             multipartUploadLimitInKB - specifies the max size (in KiB) of
             Multipart File Uploads that Solr will allow in a Request.

             formdataUploadLimitInKB - specifies the max size (in KiB) of
             form data (application/x-www-form-urlencoded) sent via
             POST. You can use POST to pass request parameters not
             fitting into the URL.

             addHttpRequestToContext - if set to true, it will instruct
             the requestParsers to include the original HttpServletRequest
             object in the context map of the SolrQueryRequest under the
             key "httpRequest". It will not be used by any of the existing
             Solr components, but may be useful when developing custom
             plugins.

             *** WARNING ***
             The settings below authorize Solr to fetch remote files, You
             should make sure your system has some authentication before
             using enableRemoteStreaming="true"

          -->
        <requestParsers enableRemoteStreaming="true"
                        multipartUploadLimitInKB="2048000"
                        formdataUploadLimitInKB="2048"
                        addHttpRequestToContext="false"/>

        <!-- HTTP Caching

             Set HTTP caching related parameters (for proxy caches and clients).

             The options below instruct Solr not to output any HTTP Caching
             related headers
          -->
        <httpCaching never304="true"/>
        <!-- If you include a <cacheControl> directive, it will be used to
             generate a Cache-Control header (as well as an Expires header
             if the value contains "max-age=")

             By default, no Cache-Control header is generated.

             You can use the <cacheControl> option even if you have set
             never304="true"
          -->
        <!--
           <httpCaching never304="true" >
             <cacheControl>max-age=30, public</cacheControl>
           </httpCaching>
          -->
        <!-- To enable Solr to respond with automatically generated HTTP
             Caching headers, and to response to Cache Validation requests
             correctly, set the value of never304="false"

             This will cause Solr to generate Last-Modified and ETag
             headers based on the properties of the Index.

             The following options can also be specified to affect the
             values of these headers...

             lastModFrom - the default value is "openTime" which means the
             Last-Modified value (and validation against If-Modified-Since
             requests) will all be relative to when the current Searcher
             was opened.  You can change it to lastModFrom="dirLastMod" if
             you want the value to exactly correspond to when the physical
             index was last modified.

             etagSeed="..." is an option you can change to force the ETag
             header (and validation against If-None-Match requests) to be
             different even if the index has not changed (ie: when making
             significant changes to your config file)

             (lastModifiedFrom and etagSeed are both ignored if you use
             the never304="true" option)
          -->
        <!--
           <httpCaching lastModifiedFrom="openTime"
                        etagSeed="Solr">
             <cacheControl>max-age=30, public</cacheControl>
           </httpCaching>
          -->
    </requestDispatcher>

    <!-- Request Handlers

         http://wiki.apache.org/solr/SolrRequestHandler

         Incoming queries will be dispatched to a specific handler by name
         based on the path specified in the request.

         Legacy behavior: If the request path uses "/select" but no Request
         Handler has that name, and if handleSelect="true" has been specified in
         the requestDispatcher, then the Request Handler is dispatched based on
         the qt parameter.  Handlers without a leading '/' are accessed this way
         like so: http://host/app/[core/]select?qt=name  If no qt is
         given, then the requestHandler that declares default="true" will be
         used or the one named "standard".

         If a Request Handler is declared with startup="lazy", then it will
         not be initialized until the first request that uses it.

      -->
    <!-- SearchHandler

         http://wiki.apache.org/solr/SearchHandler

         For processing Search Queries, the primary Request Handler
         provided with Solr is "SearchHandler" It delegates to a sequent
         of SearchComponents (see below) and supports distributed
         queries across multiple shards
      -->

    <requestHandler name="/facets" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <int name="rows">0</int>
            <str name="df">default</str>
            <str name="q.op">AND</str>

            <str name="facet">on</str>
            <str name="facet.field">dc</str>
            <str name="facet.field">docstrct</str>
            <str name="facet.field">lang</str>
            <str name="facet.field">genre</str>
            <str name="facet.field">yearpublish</str>
            <str name="facet.field">facetperson</str>
            <str name="facet.field">facetcreator</str>
            <str name="facet.field">facetpublisher</str>
            <str name="facet.field">facetplacepublish</str>

            <str name="facet.limit">5</str>

        </lst>
    </requestHandler>

    <requestHandler name="/feed" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="wt">xslt</str>
            <str name="tr">atom.xsl</str>
            <str name="fl">pid,purl,title,creator,dateindexed,datemodified</str>
            <str name="sort">dateindexed desc</str>
            <int name="rows">25</int>
            <str name="q">title:* AND (creator:* OR publisher:*)</str>
        </lst>
    </requestHandler>

    <requestHandler name="/mods" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="wt">xslt</str>
            <str name="tr">xmlpassthrough.xsl</str>
            <str name="fl">pid,purl,datemodified,dateindexed,mods</str>
            <int name="rows">10</int>
            <str name="df">default</str>
            <str name="q.op">AND</str>
        </lst>
    </requestHandler>

    <requestHandler name="/fulltext" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <int name="rows">10</int>
            <str name="df">fulltext</str>
            <str name="q.op">AND</str>
        </lst>
    </requestHandler>

    <requestHandler name="/select" class="solr.SearchHandler">
        <!-- default values for query parameters can be specified, these
             will be overridden by parameters in the request
          -->
        <lst name="defaults">
            <!--<str name="echoParams">explicit</str>-->
            <str name="echoParams">all</str>
            <int name="rows">10</int>
            <str name="df">default</str>
            <str name="q.op">AND</str>
            <str name="hl.snippets">10</str>
            <str name="hl.fragsize">10</str>
            <str name="hl.fl">p_1 p_2 p_3 p_4 p_5 p_6 p_7 p_8 p_9 p_10 p_11 p_12 p_13 p_14 p_15 p_16 p_17 p_18 p_19 p_20 p_21 p_22 p_23 p_24 p_25 p_26 p_27 p_28 p_29 p_30 p_31 p_32 p_33 p_34 p_35 p_36 p_37 p_38 p_39 p_40 p_41 p_42 p_43 p_44 p_45 p_46 p_47 p_48 p_49 p_50 p_51 p_52 p_53 p_54 p_55 p_56 p_57 p_58 p_59 p_60 p_61 p_62 p_63 p_64 p_65 p_66 p_67 p_68 p_69 p_70 p_71 p_72 p_73 p_74 p_75 p_76 p_77 p_78 p_79 p_80 p_81 p_82 p_83 p_84 p_85 p_86 p_87 p_88 p_89 p_90 p_91 p_92 p_93 p_94 p_95 p_96 p_97 p_98 p_99 p_100 p_101 p_102 p_103 p_104 p_105 p_106 p_107 p_108 p_109 p_110 p_111 p_112 p_113 p_114 p_115 p_116 p_117 p_118 p_119 p_120 p_121 p_122 p_123 p_124 p_125 p_126 p_127 p_128 p_129 p_130 p_131 p_132 p_133 p_134 p_135 p_136 p_137 p_138 p_139 p_140 p_141 p_142 p_143 p_144 p_145 p_146 p_147 p_148 p_149 p_150 p_151 p_152 p_153 p_154 p_155 p_156 p_157 p_158 p_159 p_160 p_161 p_162 p_163 p_164 p_165 p_166 p_167 p_168 p_169 p_170 p_171 p_172 p_173 p_174 p_175 p_176 p_177 p_178 p_179 p_180 p_181 p_182 p_183 p_184 p_185 p_186 p_187 p_188 p_189 p_190 p_191 p_192 p_193 p_194 p_195 p_196 p_197 p_198 p_199 p_200 p_201 p_202 p_203 p_204 p_205 p_206 p_207 p_208 p_209 p_210 p_211 p_212 p_213 p_214 p_215 p_216 p_217 p_218 p_219 p_220 p_221 p_222 p_223 p_224 p_225 p_226 p_227 p_228 p_229 p_230 p_231 p_232 p_233 p_234 p_235 p_236 p_237 p_238 p_239 p_240 p_241 p_242 p_243 p_244 p_245 p_246 p_247 p_248 p_249 p_250 p_251 p_252 p_253 p_254 p_255 p_256 p_257 p_258 p_259 p_260 p_261 p_262 p_263 p_264 p_265 p_266 p_267 p_268 p_269 p_270 p_271 p_272 p_273 p_274 p_275 p_276 p_277 p_278 p_279 p_280 p_281 p_282 p_283 p_284 p_285 p_286 p_287 p_288 p_289 p_290 p_291 p_292 p_293 p_294 p_295 p_296 p_297 p_298 p_299 p_300 p_301 p_302 p_303 p_304 p_305 p_306 p_307 p_308 p_309 p_310 p_311 p_312 p_313 p_314 p_315 p_316 p_317 p_318 p_319 p_320 p_321 p_322 p_323 p_324 p_325 p_326 p_327 p_328 p_329 p_330 p_331 p_332 p_333 p_334 p_335 p_336 p_337 p_338 p_339 p_340 p_341 p_342 p_343 p_344 p_345 p_346 p_347 p_348 p_349 p_350 p_351 p_352 p_353 p_354 p_355 p_356 p_357 p_358 p_359 p_360 p_361 p_362 p_363 p_364 p_365 p_366 p_367 p_368 p_369 p_370 p_371 p_372 p_373 p_374 p_375 p_376 p_377 p_378 p_379 p_380 p_381 p_382 p_383 p_384 p_385 p_386 p_387 p_388 p_389 p_390 p_391 p_392 p_393 p_394 p_395 p_396 p_397 p_398 p_399 p_400 p_401 p_402 p_403 p_404 p_405 p_406 p_407 p_408 p_409 p_410 p_411 p_412 p_413 p_414 p_415 p_416 p_417 p_418 p_419 p_420 p_421 p_422 p_423 p_424 p_425 p_426 p_427 p_428 p_429 p_430 p_431 p_432 p_433 p_434 p_435 p_436 p_437 p_438 p_439 p_440 p_441 p_442 p_443 p_444 p_445 p_446 p_447 p_448 p_449 p_450 p_451 p_452 p_453 p_454 p_455 p_456 p_457 p_458 p_459 p_460 p_461 p_462 p_463 p_464 p_465 p_466 p_467 p_468 p_469 p_470 p_471 p_472 p_473 p_474 p_475 p_476 p_477 p_478 p_479 p_480 p_481 p_482 p_483 p_484 p_485 p_486 p_487 p_488 p_489 p_490 p_491 p_492 p_493 p_494 p_495 p_496 p_497 p_498 p_499 p_500 p_501 p_502 p_503 p_504 p_505 p_506 p_507 p_508 p_509 p_510 p_511 p_512 p_513 p_514 p_515 p_516 p_517 p_518 p_519 p_520 p_521 p_522 p_523 p_524 p_525 p_526 p_527 p_528 p_529 p_530 p_531 p_532 p_533 p_534 p_535 p_536 p_537 p_538 p_539 p_540 p_541 p_542 p_543 p_544 p_545 p_546 p_547 p_548 p_549 p_550 p_551 p_552 p_553 p_554 p_555 p_556 p_557 p_558 p_559 p_560 p_561 p_562 p_563 p_564 p_565 p_566 p_567 p_568 p_569 p_570 p_571 p_572 p_573 p_574 p_575 p_576 p_577 p_578 p_579 p_580 p_581 p_582 p_583 p_584 p_585 p_586 p_587 p_588 p_589 p_590 p_591 p_592 p_593 p_594 p_595 p_596 p_597 p_598 p_599 p_600 p_601 p_602 p_603 p_604 p_605 p_606 p_607 p_608 p_609 p_610 p_611 p_612 p_613 p_614 p_615 p_616 p_617 p_618 p_619 p_620 p_621 p_622 p_623 p_624 p_625 p_626 p_627 p_628 p_629 p_630 p_631 p_632 p_633 p_634 p_635 p_636 p_637 p_638 p_639 p_640 p_641 p_642 p_643 p_644 p_645 p_646 p_647 p_648 p_649 p_650 p_651 p_652 p_653 p_654 p_655 p_656 p_657 p_658 p_659 p_660 p_661 p_662 p_663 p_664 p_665 p_666 p_667 p_668 p_669 p_670 p_671 p_672 p_673 p_674 p_675 p_676 p_677 p_678 p_679 p_680 p_681 p_682 p_683 p_684 p_685 p_686 p_687 p_688 p_689 p_690 p_691 p_692 p_693 p_694 p_695 p_696 p_697 p_698 p_699 p_700 p_701 p_702 p_703 p_704 p_705 p_706 p_707 p_708 p_709 p_710 p_711 p_712 p_713 p_714 p_715 p_716 p_717 p_718 p_719 p_720 p_721 p_722 p_723 p_724 p_725 p_726 p_727 p_728 p_729 p_730 p_731 p_732 p_733 p_734 p_735 p_736 p_737 p_738 p_739 p_740 p_741 p_742 p_743 p_744 p_745 p_746 p_747 p_748 p_749 p_750 p_751 p_752 p_753 p_754 p_755 p_756 p_757 p_758 p_759 p_760 p_761 p_762 p_763 p_764 p_765 p_766 p_767 p_768 p_769 p_770 p_771 p_772 p_773 p_774 p_775 p_776 p_777 p_778 p_779 p_780 p_781 p_782 p_783 p_784 p_785 p_786 p_787 p_788 p_789 p_790 p_791 p_792 p_793 p_794 p_795 p_796 p_797 p_798 p_799 p_800 p_801 p_802 p_803 p_804 p_805 p_806 p_807 p_808 p_809 p_810 p_811 p_812 p_813 p_814 p_815 p_816 p_817 p_818 p_819 p_820 p_821 p_822 p_823 p_824 p_825 p_826 p_827 p_828 p_829 p_830 p_831 p_832 p_833 p_834 p_835 p_836 p_837 p_838 p_839 p_840 p_841 p_842 p_843 p_844 p_845 p_846 p_847 p_848 p_849 p_850 p_851 p_852 p_853 p_854 p_855 p_856 p_857 p_858 p_859 p_860 p_861 p_862 p_863 p_864 p_865 p_866 p_867 p_868 p_869 p_870 p_871 p_872 p_873 p_874 p_875 p_876 p_877 p_878 p_879 p_880 p_881 p_882 p_883 p_884 p_885 p_886 p_887 p_888 p_889 p_890 p_891 p_892 p_893 p_894 p_895 p_896 p_897 p_898 p_899 p_900 p_901 p_902 p_903 p_904 p_905 p_906 p_907 p_908 p_909 p_910 p_911 p_912 p_913 p_914 p_915 p_916 p_917 p_918 p_919 p_920 p_921 p_922 p_923 p_924 p_925 p_926 p_927 p_928 p_929 p_930 p_931 p_932 p_933 p_934 p_935 p_936 p_937 p_938 p_939 p_940 p_941 p_942 p_943 p_944 p_945 p_946 p_947 p_948 p_949 p_950 p_951 p_952 p_953 p_954 p_955 p_956 p_957 p_958 p_959 p_960 p_961 p_962 p_963 p_964 p_965 p_966 p_967 p_968 p_969 p_970 p_971 p_972 p_973 p_974 p_975 p_976 p_977 p_978 p_979 p_980 p_981 p_982 p_983 p_984 p_985 p_986 p_987 p_988 p_989 p_990 p_991 p_992 p_993 p_994 p_995 p_996 p_997 p_998 p_999 p_1000 p_1001 p_1002 p_1003 p_1004 p_1005 p_1006 p_1007 p_1008 p_1009 p_1010 p_1011 p_1012 p_1013 p_1014 p_1015 p_1016 p_1017 p_1018 p_1019 p_1020 p_1021 p_1022 p_1023 p_1024 p_1025 p_1026 p_1027 p_1028 p_1029 p_1030 p_1031 p_1032 p_1033 p_1034 p_1035 p_1036 p_1037 p_1038 p_1039 p_1040 p_1041 p_1042 p_1043 p_1044 p_1045 p_1046 p_1047 p_1048 p_1049 p_1050 p_1051 p_1052 p_1053 p_1054 p_1055 p_1056 p_1057 p_1058 p_1059 p_1060 p_1061 p_1062 p_1063 p_1064 p_1065 p_1066 p_1067 p_1068 p_1069 p_1070 p_1071 p_1072 p_1073 p_1074 p_1075 p_1076 p_1077 p_1078 p_1079 p_1080 p_1081 p_1082 p_1083 p_1084 p_1085 p_1086 p_1087 p_1088 p_1089 p_1090 p_1091 p_1092 p_1093 p_1094 p_1095 p_1096 p_1097 p_1098 p_1099 p_1100 p_1101 p_1102 p_1103 p_1104 p_1105 p_1106 p_1107 p_1108 p_1109 p_1110 p_1111 p_1112 p_1113 p_1114 p_1115 p_1116 p_1117 p_1118 p_1119 p_1120 p_1121 p_1122 p_1123 p_1124 p_1125 p_1126 p_1127 p_1128 p_1129 p_1130 p_1131 p_1132 p_1133 p_1134 p_1135 p_1136 p_1137 p_1138 p_1139 p_1140 p_1141 p_1142 p_1143 p_1144 p_1145 p_1146 p_1147 p_1148 p_1149 p_1150 p_1151 p_1152 p_1153 p_1154 p_1155 p_1156 p_1157 p_1158 p_1159 p_1160 p_1161 p_1162 p_1163 p_1164 p_1165 p_1166 p_1167 p_1168 p_1169 p_1170 p_1171 p_1172 p_1173 p_1174 p_1175 p_1176 p_1177 p_1178 p_1179 p_1180 p_1181 p_1182 p_1183 p_1184 p_1185 p_1186 p_1187 p_1188 p_1189 p_1190 p_1191 p_1192 p_1193 p_1194 p_1195 p_1196 p_1197 p_1198 p_1199 p_1200 p_1201 p_1202 p_1203 p_1204 p_1205 p_1206 p_1207 p_1208 p_1209 p_1210 p_1211 p_1212 p_1213 p_1214 p_1215 p_1216 p_1217 p_1218 p_1219 p_1220 p_1221 p_1222 p_1223 p_1224 p_1225 p_1226 p_1227 p_1228 p_1229 p_1230 p_1231 p_1232 p_1233 p_1234 p_1235 p_1236 p_1237 p_1238 p_1239 p_1240 p_1241 p_1242 p_1243 p_1244 p_1245 p_1246 p_1247 p_1248 p_1249 p_1250 p_1251 p_1252 p_1253 p_1254 p_1255 p_1256 p_1257 p_1258 p_1259 p_1260 p_1261 p_1262 p_1263 p_1264 p_1265 p_1266 p_1267 p_1268 p_1269 p_1270 p_1271 p_1272 p_1273 p_1274 p_1275 p_1276 p_1277 p_1278 p_1279 p_1280 p_1281 p_1282 p_1283 p_1284 p_1285 p_1286 p_1287 p_1288 p_1289 p_1290 p_1291 p_1292 p_1293 p_1294 p_1295 p_1296 p_1297 p_1298 p_1299 p_1300 p_1301 p_1302 p_1303 p_1304 p_1305 p_1306 p_1307 p_1308 p_1309 p_1310 p_1311 p_1312 p_1313 p_1314 p_1315 p_1316 p_1317 p_1318 p_1319 p_1320 p_1321 p_1322 p_1323 p_1324 p_1325 p_1326 p_1327 p_1328 p_1329 p_1330 p_1331 p_1332 p_1333 p_1334 p_1335 p_1336 p_1337 p_1338 p_1339 p_1340 p_1341 p_1342 p_1343 p_1344 p_1345 p_1346 p_1347 p_1348 p_1349 p_1350 p_1351 p_1352 p_1353 p_1354 p_1355 p_1356 p_1357 p_1358 p_1359 p_1360 p_1361 p_1362 p_1363 p_1364 p_1365 p_1366 p_1367 p_1368 p_1369 p_1370 p_1371 p_1372 p_1373 p_1374 p_1375 p_1376 p_1377 p_1378 p_1379 p_1380 p_1381 p_1382 p_1383 p_1384 p_1385 p_1386 p_1387 p_1388 p_1389 p_1390 p_1391 p_1392 p_1393 p_1394 p_1395 p_1396 p_1397 p_1398 p_1399 p_1400 p_1401 p_1402 p_1403 p_1404 p_1405 p_1406 p_1407 p_1408 p_1409 p_1410 p_1411 p_1412 p_1413 p_1414 p_1415 p_1416 p_1417 p_1418 p_1419 p_1420 p_1421 p_1422 p_1423 p_1424 p_1425 p_1426 p_1427 p_1428 p_1429 p_1430 p_1431 p_1432 p_1433 p_1434 p_1435 p_1436 p_1437 p_1438 p_1439 p_1440 p_1441 p_1442 p_1443 p_1444 p_1445 p_1446 p_1447 p_1448 p_1449 p_1450 p_1451 p_1452 p_1453 p_1454 p_1455 p_1456 p_1457 p_1458 p_1459 p_1460 p_1461 p_1462 p_1463 p_1464 p_1465 p_1466 p_1467 p_1468 p_1469 p_1470 p_1471 p_1472 p_1473 p_1474 p_1475 p_1476 p_1477 p_1478 p_1479 p_1480 p_1481 p_1482 p_1483 p_1484 p_1485 p_1486 p_1487 p_1488 p_1489 p_1490 p_1491 p_1492 p_1493 p_1494 p_1495 p_1496 p_1497 p_1498 p_1499 p_1500 p_1501 p_1502 p_1503 p_1504 p_1505 p_1506 p_1507 p_1508 p_1509 p_1510 p_1511 p_1512 p_1513 p_1514 p_1515 p_1516 p_1517 p_1518 p_1519 p_1520 p_1521 p_1522 p_1523 p_1524 p_1525 p_1526 p_1527 p_1528 p_1529 p_1530 p_1531 p_1532 p_1533 p_1534 p_1535 p_1536 p_1537 p_1538 p_1539 p_1540 p_1541 p_1542 p_1543 p_1544 p_1545 p_1546 p_1547 p_1548 p_1549 p_1550 p_1551 p_1552 p_1553 p_1554 p_1555 p_1556 p_1557 p_1558 p_1559 p_1560 p_1561 p_1562 p_1563 p_1564 p_1565 p_1566 p_1567 p_1568 p_1569 p_1570 p_1571 p_1572 p_1573 p_1574 p_1575 p_1576 p_1577 p_1578 p_1579 p_1580 p_1581 p_1582 p_1583 p_1584 p_1585 p_1586 p_1587 p_1588 p_1589 p_1590 p_1591 p_1592 p_1593 p_1594 p_1595 p_1596 p_1597 p_1598 p_1599 p_1600 p_1601 p_1602 p_1603 p_1604 p_1605 p_1606 p_1607 p_1608 p_1609 p_1610 p_1611 p_1612 p_1613 p_1614 p_1615 p_1616 p_1617 p_1618 p_1619 p_1620 p_1621 p_1622 p_1623 p_1624 p_1625 p_1626 p_1627 p_1628 p_1629 p_1630 p_1631 p_1632 p_1633 p_1634 p_1635 p_1636 p_1637 p_1638 p_1639 p_1640 p_1641 p_1642 p_1643 p_1644 p_1645 p_1646 p_1647 p_1648 p_1649 p_1650 p_1651 p_1652 p_1653 p_1654 p_1655 p_1656 p_1657 p_1658 p_1659 p_1660 p_1661 p_1662 p_1663 p_1664 p_1665 p_1666 p_1667 p_1668 p_1669 p_1670 p_1671 p_1672 p_1673 p_1674 p_1675 p_1676 p_1677 p_1678 p_1679 p_1680 p_1681 p_1682 p_1683 p_1684 p_1685 p_1686 p_1687 p_1688 p_1689 p_1690 p_1691 p_1692 p_1693 p_1694 p_1695 p_1696 p_1697 p_1698 p_1699 p_1700 p_1701 p_1702 p_1703 p_1704 p_1705 p_1706 p_1707 p_1708 p_1709 p_1710 p_1711 p_1712 p_1713 p_1714 p_1715 p_1716 p_1717 p_1718 p_1719 p_1720 p_1721 p_1722 p_1723 p_1724 p_1725 p_1726 p_1727 p_1728 p_1729 p_1730 p_1731 p_1732 p_1733 p_1734 p_1735 p_1736 p_1737 p_1738 p_1739 p_1740 p_1741 p_1742 p_1743 p_1744 p_1745 p_1746 p_1747 p_1748 p_1749 p_1750 p_1751 p_1752 p_1753 p_1754 p_1755 p_1756 p_1757 p_1758 p_1759 p_1760 p_1761 p_1762 p_1763 p_1764 p_1765 p_1766 p_1767 p_1768 p_1769 p_1770 p_1771 p_1772 p_1773 p_1774 p_1775 p_1776 p_1777 p_1778 p_1779 p_1780 p_1781 p_1782 p_1783 p_1784 p_1785 p_1786 p_1787 p_1788 p_1789 p_1790 p_1791 p_1792 p_1793 p_1794 p_1795 p_1796 p_1797 p_1798 p_1799 p_1800 p_1801 p_1802 p_1803 p_1804 p_1805 p_1806 p_1807 p_1808 p_1809 p_1810 p_1811 p_1812 p_1813 p_1814 p_1815 p_1816 p_1817 p_1818 p_1819 p_1820 p_1821 p_1822 p_1823 p_1824 p_1825 p_1826 p_1827 p_1828 p_1829 p_1830 p_1831 p_1832 p_1833 p_1834 p_1835 p_1836 p_1837 p_1838 p_1839 p_1840 p_1841 p_1842 p_1843 p_1844 p_1845 p_1846 p_1847 p_1848 p_1849 p_1850 p_1851 p_1852 p_1853 p_1854 p_1855 p_1856 p_1857 p_1858 p_1859 p_1860 p_1861 p_1862 p_1863 p_1864 p_1865 p_1866 p_1867 p_1868 p_1869 p_1870 p_1871 p_1872 p_1873 p_1874 p_1875 p_1876 p_1877 p_1878 p_1879 p_1880 p_1881 p_1882 p_1883 p_1884 p_1885 p_1886 p_1887 p_1888 p_1889 p_1890 p_1891 p_1892 p_1893 p_1894 p_1895 p_1896 p_1897 p_1898 p_1899 p_1900 p_1901 p_1902 p_1903 p_1904 p_1905 p_1906 p_1907 p_1908 p_1909 p_1910 p_1911 p_1912 p_1913 p_1914 p_1915 p_1916 p_1917 p_1918 p_1919 p_1920 p_1921 p_1922 p_1923 p_1924 p_1925 p_1926 p_1927 p_1928 p_1929 p_1930 p_1931 p_1932 p_1933 p_1934 p_1935 p_1936 p_1937 p_1938 p_1939 p_1940 p_1941 p_1942 p_1943 p_1944 p_1945 p_1946 p_1947 p_1948 p_1949 p_1950 p_1951 p_1952 p_1953 p_1954 p_1955 p_1956 p_1957 p_1958 p_1959 p_1960 p_1961 p_1962 p_1963 p_1964 p_1965 p_1966 p_1967 p_1968 p_1969 p_1970 p_1971 p_1972 p_1973 p_1974 p_1975 p_1976 p_1977 p_1978 p_1979 p_1980 p_1981 p_1982 p_1983 p_1984 p_1985 p_1986 p_1987 p_1988 p_1989 p_1990 p_1991 p_1992 p_1993 p_1994 p_1995 p_1996 p_1997 p_1998 p_1999 p_2000 p_2001 p_2002 p_2003 p_2004 p_2005 p_2006 p_2007 p_2008 p_2009 p_2010 p_2011 p_2012 p_2013 p_2014 p_2015 p_2016 p_2017 p_2018 p_2019 p_2020 p_2021 p_2022 p_2023 p_2024 p_2025 p_2026 p_2027 p_2028 p_2029 p_2030 p_2031 p_2032 p_2033 p_2034 p_2035 p_2036 p_2037 p_2038 p_2039 p_2040 p_2041 p_2042 p_2043 p_2044 p_2045 p_2046 p_2047 p_2048 p_2049 p_2050 p_2051 p_2052 p_2053 p_2054 p_2055 p_2056 p_2057 p_2058 p_2059 p_2060 p_2061 p_2062 p_2063 p_2064 p_2065 p_2066 p_2067 p_2068 p_2069 p_2070 p_2071 p_2072 p_2073 p_2074 p_2075 p_2076 p_2077 p_2078 p_2079 p_2080 p_2081 p_2082 p_2083 p_2084 p_2085 p_2086 p_2087 p_2088 p_2089 p_2090 p_2091 p_2092 p_2093 p_2094 p_2095 p_2096 p_2097 p_2098 p_2099 p_2100 p_2101 p_2102 p_2103 p_2104 p_2105 p_2106 p_2107 p_2108 p_2109 p_2110 p_2111 p_2112 p_2113 p_2114 p_2115 p_2116 p_2117 p_2118 p_2119 p_2120 p_2121 p_2122 p_2123 p_2124 p_2125 p_2126 p_2127 p_2128 p_2129 p_2130 p_2131 p_2132 p_2133 p_2134 p_2135 p_2136 p_2137 p_2138 p_2139 p_2140 p_2141 p_2142 p_2143 p_2144 p_2145 p_2146 p_2147 p_2148 p_2149 p_2150 p_2151 p_2152 p_2153 p_2154 p_2155 p_2156 p_2157 p_2158 p_2159 p_2160 p_2161 p_2162 p_2163 p_2164 p_2165 p_2166 p_2167 p_2168 p_2169 p_2170 p_2171 p_2172 p_2173 p_2174 p_2175 p_2176 p_2177 p_2178 p_2179 p_2180 p_2181 p_2182 p_2183 p_2184 p_2185 p_2186 p_2187 p_2188 p_2189 p_2190 p_2191 p_2192 p_2193 p_2194 p_2195 p_2196 p_2197 p_2198 p_2199 p_2200 p_2201 p_2202 p_2203 p_2204 p_2205 p_2206 p_2207 p_2208 p_2209 p_2210 p_2211 p_2212 p_2213 p_2214 p_2215 p_2216 p_2217 p_2218 p_2219 p_2220 p_2221 p_2222 p_2223 p_2224 p_2225 p_2226 p_2227 p_2228 p_2229 p_2230 p_2231 p_2232 p_2233 p_2234 p_2235 p_2236 p_2237 p_2238 p_2239 p_2240 p_2241 p_2242 p_2243 p_2244 p_2245 p_2246 p_2247 p_2248 p_2249 p_2250 p_2251 p_2252 p_2253 p_2254 p_2255 p_2256 p_2257 p_2258 p_2259 p_2260 p_2261 p_2262 p_2263 p_2264 p_2265 p_2266 p_2267 p_2268 p_2269 p_2270 p_2271 p_2272 p_2273 p_2274 p_2275 p_2276 p_2277 p_2278 p_2279 p_2280 p_2281 p_2282 p_2283 p_2284 p_2285 p_2286 p_2287 p_2288 p_2289 p_2290 p_2291 p_2292 p_2293 p_2294 p_2295 p_2296 p_2297 p_2298 p_2299 p_2300 p_2301 p_2302 p_2303 p_2304 p_2305 p_2306 p_2307 p_2308 p_2309 p_2310 p_2311 p_2312 p_2313 p_2314 p_2315 p_2316 p_2317 p_2318 p_2319 p_2320 p_2321 p_2322 p_2323 p_2324 p_2325 p_2326 p_2327 p_2328 p_2329 p_2330 p_2331 p_2332 p_2333 p_2334 p_2335 p_2336 p_2337 p_2338 p_2339 p_2340 p_2341 p_2342 p_2343 p_2344 p_2345 p_2346 p_2347 p_2348 p_2349 p_2350 p_2351 p_2352 p_2353 p_2354 p_2355 p_2356 p_2357 p_2358 p_2359 p_2360 p_2361 p_2362 p_2363 p_2364 p_2365 p_2366 p_2367 p_2368 p_2369 p_2370 p_2371 p_2372 p_2373 p_2374 p_2375 p_2376 p_2377 p_2378 p_2379 p_2380 p_2381 p_2382 p_2383 p_2384 p_2385 p_2386 p_2387 p_2388 p_2389 p_2390 p_2391 p_2392 p_2393 p_2394 p_2395 p_2396 p_2397 p_2398 p_2399 p_2400 p_2401 p_2402 p_2403 p_2404 p_2405 p_2406 p_2407 p_2408 p_2409 p_2410 p_2411 p_2412 p_2413 p_2414 p_2415 p_2416 p_2417 p_2418 p_2419 p_2420 p_2421 p_2422 p_2423 p_2424 p_2425 p_2426 p_2427 p_2428 p_2429 p_2430 p_2431 p_2432 p_2433 p_2434 p_2435 p_2436 p_2437 p_2438 p_2439 p_2440 p_2441 p_2442 p_2443 p_2444 p_2445 p_2446 p_2447 p_2448 p_2449 p_2450 p_2451 p_2452 p_2453 p_2454 p_2455 p_2456 p_2457 p_2458 p_2459 p_2460 p_2461 p_2462 p_2463 p_2464 p_2465 p_2466 p_2467 p_2468 p_2469 p_2470 p_2471 p_2472 p_2473 p_2474 p_2475 p_2476 p_2477 p_2478 p_2479 p_2480 p_2481 p_2482 p_2483 p_2484 p_2485 p_2486 p_2487 p_2488 p_2489 p_2490 p_2491 p_2492 p_2493 p_2494 p_2495 p_2496 p_2497 p_2498 p_2499 p_2500 p_2501 p_2502 p_2503 p_2504 p_2505 p_2506 p_2507 p_2508 p_2509 p_2510 p_2511 p_2512 p_2513 p_2514 p_2515 p_2516 p_2517 p_2518 p_2519 p_2520 p_2521 p_2522 p_2523 p_2524 p_2525 p_2526 p_2527 p_2528 p_2529 p_2530 p_2531 p_2532 p_2533 p_2534 p_2535 p_2536 p_2537 p_2538 p_2539 p_2540 p_2541 p_2542 p_2543 p_2544 p_2545 p_2546 p_2547 p_2548 p_2549 p_2550 p_2551 p_2552 p_2553 p_2554 p_2555 p_2556 p_2557 p_2558 p_2559 p_2560 p_2561 p_2562 p_2563 p_2564 p_2565 p_2566 p_2567 p_2568 p_2569 p_2570 p_2571 p_2572 p_2573 p_2574 p_2575 p_2576 p_2577 p_2578 p_2579 p_2580 p_2581 p_2582 p_2583 p_2584 p_2585 p_2586 p_2587 p_2588 p_2589 p_2590 p_2591 p_2592 p_2593 p_2594 p_2595 p_2596 p_2597 p_2598 p_2599 p_2600 p_2601 p_2602 p_2603 p_2604 p_2605 p_2606 p_2607 p_2608 p_2609 p_2610 p_2611 p_2612 p_2613 p_2614 p_2615 p_2616 p_2617 p_2618 p_2619 p_2620 p_2621 p_2622 p_2623 p_2624 p_2625 p_2626 p_2627 p_2628 p_2629 p_2630 p_2631 p_2632 p_2633 p_2634 p_2635 p_2636 p_2637 p_2638 p_2639 p_2640 p_2641 p_2642 p_2643 p_2644 p_2645 p_2646 p_2647 p_2648 p_2649 p_2650 p_2651 p_2652 p_2653 p_2654 p_2655 p_2656 p_2657 p_2658 p_2659 p_2660 p_2661 p_2662 p_2663 p_2664 p_2665 p_2666 p_2667 p_2668 p_2669 p_2670 p_2671 p_2672 p_2673 p_2674 p_2675 p_2676 p_2677 p_2678 p_2679 p_2680 p_2681 p_2682 p_2683 p_2684 p_2685 p_2686 p_2687 p_2688 p_2689 p_2690 p_2691 p_2692 p_2693 p_2694 p_2695 p_2696 p_2697 p_2698 p_2699 p_2700 p_2701 p_2702 p_2703 p_2704 p_2705 p_2706 p_2707 p_2708 p_2709 p_2710 p_2711 p_2712 p_2713 p_2714 p_2715 p_2716 p_2717 p_2718 p_2719 p_2720 p_2721 p_2722 p_2723 p_2724 p_2725 p_2726 p_2727 p_2728 p_2729 p_2730 p_2731 p_2732 p_2733 p_2734 p_2735 p_2736 p_2737 p_2738 p_2739 p_2740 p_2741 p_2742 p_2743 p_2744 p_2745 p_2746 p_2747 p_2748 p_2749 p_2750 p_2751 p_2752 p_2753 p_2754 p_2755 p_2756 p_2757 p_2758 p_2759 p_2760 p_2761 p_2762 p_2763 p_2764 p_2765 p_2766 p_2767 p_2768 p_2769 p_2770 p_2771 p_2772 p_2773 p_2774 p_2775 p_2776 p_2777 p_2778 p_2779 p_2780 p_2781 p_2782 p_2783 p_2784 p_2785 p_2786 p_2787 p_2788 p_2789 p_2790 p_2791 p_2792 p_2793 p_2794 p_2795 p_2796 p_2797 p_2798 p_2799 p_2800 p_2801 p_2802 p_2803 p_2804 p_2805 p_2806 p_2807 p_2808 p_2809 p_2810 p_2811 p_2812 p_2813 p_2814 p_2815 p_2816 p_2817 p_2818 p_2819 p_2820 p_2821 p_2822 p_2823 p_2824 p_2825 p_2826 p_2827 p_2828 p_2829 p_2830 p_2831 p_2832 p_2833 p_2834 p_2835 p_2836 p_2837 p_2838 p_2839 p_2840 p_2841 p_2842 p_2843 p_2844 p_2845 p_2846 p_2847 p_2848 p_2849 p_2850 p_2851 p_2852 p_2853 p_2854 p_2855 p_2856 p_2857 p_2858 p_2859 p_2860 p_2861 p_2862 p_2863 p_2864 p_2865 p_2866 p_2867 p_2868 p_2869 p_2870 p_2871 p_2872 p_2873 p_2874 p_2875 p_2876 p_2877 p_2878 p_2879 p_2880 p_2881 p_2882 p_2883 p_2884 p_2885 p_2886 p_2887 p_2888 p_2889 p_2890 p_2891 p_2892 p_2893 p_2894 p_2895 p_2896 p_2897 p_2898 p_2899 p_2900 p_2901 p_2902 p_2903 p_2904 p_2905 p_2906 p_2907 p_2908 p_2909 p_2910 p_2911 p_2912 p_2913 p_2914 p_2915 p_2916 p_2917 p_2918 p_2919 p_2920 p_2921 p_2922 p_2923 p_2924 p_2925 p_2926 p_2927 p_2928 p_2929 p_2930 p_2931 p_2932 p_2933 p_2934 p_2935 p_2936 p_2937 p_2938 p_2939 p_2940 p_2941 p_2942 p_2943 p_2944 p_2945 p_2946 p_2947 p_2948 p_2949 p_2950 p_2951 p_2952 p_2953 p_2954 p_2955 p_2956 p_2957 p_2958 p_2959 p_2960 p_2961 p_2962 p_2963 p_2964 p_2965 p_2966 p_2967 p_2968 p_2969 p_2970 p_2971 p_2972 p_2973 p_2974 p_2975 p_2976 p_2977 p_2978 p_2979 p_2980 p_2981 p_2982 p_2983 p_2984 p_2985 p_2986 p_2987 p_2988 p_2989 p_2990 p_2991 p_2992 p_2993 p_2994 p_2995 p_2996 p_2997 p_2998 p_2999 p_3000 p_3001 p_3002 p_3003 p_3004 p_3005 p_3006 p_3007 p_3008 p_3009 p_3010 p_3011 p_3012 p_3013 p_3014 p_3015 p_3016 p_3017 p_3018 p_3019 p_3020 p_3021 p_3022 p_3023 p_3024 p_3025 p_3026 p_3027 p_3028 p_3029 p_3030 p_3031 p_3032 p_3033 p_3034 p_3035 p_3036 p_3037 p_3038 p_3039 p_3040 p_3041 p_3042 p_3043 p_3044 p_3045 p_3046 p_3047 p_3048 p_3049 p_3050 p_3051 p_3052 p_3053 p_3054 p_3055 p_3056 p_3057 p_3058 p_3059 p_3060 p_3061 p_3062 p_3063 p_3064 p_3065 p_3066 p_3067 p_3068 p_3069 p_3070 p_3071 p_3072 p_3073 p_3074 p_3075 p_3076 p_3077 p_3078 p_3079 p_3080 p_3081 p_3082 p_3083 p_3084 p_3085 p_3086 p_3087 p_3088 p_3089 p_3090 p_3091 p_3092 p_3093 p_3094 p_3095 p_3096 p_3097 p_3098 p_3099 p_3100 p_3101 p_3102 p_3103 p_3104 p_3105 p_3106 p_3107 p_3108 p_3109 p_3110 p_3111 p_3112 p_3113 p_3114 p_3115 p_3116 p_3117 p_3118 p_3119 p_3120 p_3121 p_3122 p_3123 p_3124 p_3125 p_3126 p_3127 p_3128 p_3129 p_3130 p_3131 p_3132 p_3133 p_3134 p_3135 p_3136 p_3137 p_3138 p_3139 p_3140 p_3141 p_3142 p_3143 p_3144 p_3145 p_3146 p_3147 p_3148 p_3149 p_3150 p_3151 p_3152 p_3153 p_3154 p_3155 p_3156 p_3157 p_3158 p_3159 p_3160 p_3161 p_3162 p_3163 p_3164 p_3165 p_3166 p_3167 p_3168 p_3169 p_3170 p_3171 p_3172 p_3173 p_3174 p_3175 p_3176 p_3177 p_3178 p_3179 p_3180 p_3181 p_3182 p_3183 p_3184 p_3185 p_3186 p_3187 p_3188 p_3189 p_3190 p_3191 p_3192 p_3193 p_3194 p_3195 p_3196 p_3197 p_3198 p_3199 p_3200 p_3201 p_3202 p_3203 p_3204 p_3205 p_3206 p_3207 p_3208 p_3209 p_3210 p_3211 p_3212 p_3213 p_3214 p_3215 p_3216 p_3217 p_3218 p_3219 p_3220 p_3221 p_3222 p_3223 p_3224 p_3225 p_3226 p_3227 p_3228 p_3229 p_3230 p_3231 p_3232 p_3233 p_3234 p_3235 p_3236 p_3237 p_3238 p_3239 p_3240 p_3241 p_3242 p_3243 p_3244 p_3245 p_3246 p_3247 p_3248 p_3249 p_3250 p_3251 p_3252 p_3253 p_3254 p_3255 p_3256 p_3257 p_3258 p_3259 p_3260 p_3261 p_3262 p_3263 p_3264 p_3265 p_3266 p_3267 p_3268 p_3269 p_3270 p_3271 p_3272 p_3273 p_3274 p_3275 p_3276 p_3277 p_3278 p_3279 p_3280 p_3281 p_3282 p_3283 p_3284 p_3285 p_3286 p_3287 p_3288 p_3289 p_3290 p_3291 p_3292 p_3293 p_3294 p_3295 p_3296 p_3297 p_3298 p_3299 p_3300 p_3301 p_3302 p_3303 p_3304 p_3305 p_3306 p_3307 p_3308 p_3309 p_3310 p_3311 p_3312 p_3313 p_3314 p_3315 p_3316 p_3317 p_3318 p_3319 p_3320 p_3321 p_3322 p_3323 p_3324 p_3325 p_3326 p_3327 p_3328 p_3329 p_3330 p_3331 p_3332 p_3333 p_3334 p_3335 p_3336 p_3337 p_3338 p_3339 p_3340 p_3341 p_3342 p_3343 p_3344 p_3345 p_3346 p_3347 p_3348 p_3349 p_3350 p_3351 p_3352 p_3353 p_3354 p_3355 p_3356 p_3357 p_3358 p_3359 p_3360 p_3361 p_3362 p_3363 p_3364 p_3365 p_3366 p_3367 p_3368 p_3369 p_3370 p_3371 p_3372 p_3373 p_3374 p_3375 p_3376 p_3377 p_3378 p_3379 p_3380 p_3381 p_3382 p_3383 p_3384 p_3385 p_3386 p_3387 p_3388 p_3389 p_3390 p_3391 p_3392 p_3393 p_3394 p_3395 p_3396 p_3397 p_3398 p_3399 p_3400 p_3401 p_3402 p_3403 p_3404 p_3405 p_3406 p_3407 p_3408 p_3409 p_3410 p_3411 p_3412 p_3413 p_3414 p_3415 p_3416 p_3417 p_3418 p_3419 p_3420 p_3421 p_3422 p_3423 p_3424 p_3425 p_3426 p_3427 p_3428 p_3429 p_3430 p_3431 p_3432 p_3433 p_3434 p_3435 p_3436 p_3437 p_3438 p_3439 p_3440 p_3441 p_3442 p_3443 p_3444 p_3445 p_3446 p_3447 p_3448 p_3449 p_3450 p_3451 p_3452 p_3453 p_3454 p_3455 p_3456 p_3457 p_3458 p_3459 p_3460 p_3461 p_3462 p_3463 p_3464 p_3465 p_3466 p_3467 p_3468 p_3469 p_3470 p_3471 p_3472 p_3473 p_3474 p_3475 p_3476 p_3477 p_3478 p_3479 p_3480 p_3481 p_3482 p_3483 p_3484 p_3485 p_3486 p_3487 p_3488 p_3489 p_3490 p_3491 p_3492 p_3493 p_3494 p_3495 p_3496 p_3497 p_3498 p_3499 p_3500 p_3501 p_3502 p_3503 p_3504 p_3505 p_3506 p_3507 p_3508 p_3509 p_3510 p_3511 p_3512 p_3513 p_3514 p_3515 p_3516 p_3517 p_3518 p_3519 p_3520 p_3521 p_3522 p_3523 p_3524 p_3525 p_3526 p_3527 p_3528 p_3529 p_3530 p_3531 p_3532 p_3533 p_3534 p_3535 p_3536 p_3537 p_3538 p_3539 p_3540 p_3541 p_3542 p_3543 p_3544 p_3545 p_3546 p_3547 p_3548 p_3549 p_3550 p_3551 p_3552 p_3553 p_3554 p_3555 p_3556 p_3557 p_3558 p_3559 p_3560 p_3561 p_3562 p_3563 p_3564 p_3565 p_3566 p_3567 p_3568 p_3569 p_3570 p_3571 p_3572 p_3573 p_3574 p_3575 p_3576 p_3577 p_3578 p_3579 p_3580 p_3581 p_3582 p_3583 p_3584 p_3585 p_3586 p_3587 p_3588 p_3589 p_3590 p_3591 p_3592 p_3593 p_3594 p_3595 p_3596 p_3597 p_3598 p_3599 p_3600 p_3601 p_3602 p_3603 p_3604 p_3605 p_3606 p_3607 p_3608 p_3609 p_3610 p_3611 p_3612 p_3613 p_3614 p_3615 p_3616 p_3617 p_3618 p_3619 p_3620 p_3621 p_3622 p_3623 p_3624 p_3625 p_3626 p_3627 p_3628 p_3629 p_3630 p_3631 p_3632 p_3633 p_3634 p_3635 p_3636 p_3637 p_3638 p_3639 p_3640 p_3641 p_3642 p_3643 p_3644 p_3645 p_3646 p_3647 p_3648 p_3649 p_3650 p_3651 p_3652 p_3653 p_3654 p_3655 p_3656 p_3657 p_3658 p_3659 p_3660 p_3661 p_3662 p_3663 p_3664 p_3665 p_3666 p_3667 p_3668 p_3669 p_3670 p_3671 p_3672 p_3673 p_3674 p_3675 p_3676 p_3677 p_3678 p_3679 p_3680 p_3681 p_3682 p_3683 p_3684 p_3685 p_3686 p_3687 p_3688 p_3689 p_3690 p_3691 p_3692 p_3693 p_3694 p_3695 p_3696 p_3697 p_3698 p_3699 p_3700 p_3701 p_3702 p_3703 p_3704 p_3705 p_3706 p_3707 p_3708 p_3709 p_3710 p_3711 p_3712 p_3713 p_3714 p_3715 p_3716 p_3717 p_3718 p_3719 p_3720 p_3721 p_3722 p_3723 p_3724 p_3725 p_3726 p_3727 p_3728 p_3729 p_3730 p_3731 p_3732 p_3733 p_3734 p_3735 p_3736 p_3737 p_3738 p_3739 p_3740 p_3741 p_3742 p_3743 p_3744 p_3745 p_3746 p_3747 p_3748 p_3749 p_3750 p_3751 p_3752 p_3753 p_3754 p_3755 p_3756 p_3757 p_3758 p_3759 p_3760 p_3761 p_3762 p_3763 p_3764 p_3765 p_3766 p_3767 p_3768 p_3769 p_3770 p_3771 p_3772 p_3773 p_3774 p_3775 p_3776 p_3777 p_3778 p_3779 p_3780 p_3781 p_3782 p_3783 p_3784 p_3785 p_3786 p_3787 p_3788 p_3789 p_3790 p_3791 p_3792 p_3793 p_3794 p_3795 p_3796 p_3797 p_3798 p_3799 p_3800 p_3801 p_3802 p_3803 p_3804 p_3805 p_3806 p_3807 p_3808 p_3809 p_3810 p_3811 p_3812 p_3813 p_3814 p_3815 p_3816 p_3817 p_3818 p_3819 p_3820 p_3821 p_3822 p_3823 p_3824 p_3825 p_3826 p_3827 p_3828 p_3829 p_3830 p_3831 p_3832 p_3833 p_3834 p_3835 p_3836 p_3837 p_3838 p_3839 p_3840 p_3841 p_3842 p_3843 p_3844 p_3845 p_3846 p_3847 p_3848 p_3849 p_3850 p_3851 p_3852 p_3853 p_3854 p_3855 p_3856 p_3857 p_3858 p_3859 p_3860 p_3861 p_3862 p_3863 p_3864 p_3865 p_3866 p_3867 p_3868 p_3869 p_3870 p_3871 p_3872 p_3873 p_3874 p_3875 p_3876 p_3877 p_3878 p_3879 p_3880 p_3881 p_3882 p_3883 p_3884 p_3885 p_3886 p_3887 p_3888 p_3889 p_3890 p_3891 p_3892 p_3893 p_3894 p_3895 p_3896 p_3897 p_3898 p_3899 p_3900 p_3901 p_3902 p_3903 p_3904 p_3905 p_3906 p_3907 p_3908 p_3909 p_3910 p_3911 p_3912 p_3913 p_3914 p_3915 p_3916 p_3917 p_3918 p_3919 p_3920 p_3921 p_3922 p_3923 p_3924 p_3925 p_3926 p_3927 p_3928 p_3929 p_3930 p_3931 p_3932 p_3933 p_3934 p_3935 p_3936 p_3937 p_3938 p_3939 p_3940 p_3941 p_3942 p_3943 p_3944 p_3945 p_3946 p_3947 p_3948 p_3949 p_3950 p_3951 p_3952 p_3953 p_3954 p_3955 p_3956 p_3957 p_3958 p_3959 p_3960 p_3961 p_3962 p_3963 p_3964 p_3965 p_3966 p_3967 p_3968 p_3969 p_3970 p_3971 p_3972 p_3973 p_3974 p_3975 p_3976 p_3977 p_3978 p_3979 p_3980 p_3981 p_3982 p_3983 p_3984 p_3985 p_3986 p_3987 p_3988 p_3989 p_3990 p_3991 p_3992 p_3993 p_3994 p_3995 p_3996 p_3997 p_3998 p_3999 p_4000 p_4001 p_4002 p_4003 p_4004 p_4005 p_4006 p_4007 p_4008 p_4009 p_4010 p_4011 p_4012 p_4013 p_4014 p_4015 p_4016 p_4017 p_4018 p_4019 p_4020 p_4021 p_4022 p_4023 p_4024 p_4025 p_4026 p_4027 p_4028 p_4029 p_4030 p_4031 p_4032 p_4033 p_4034 p_4035 p_4036 p_4037 p_4038 p_4039 p_4040 p_4041 p_4042 p_4043 p_4044 p_4045 p_4046 p_4047 p_4048 p_4049 p_4050 p_4051 p_4052 p_4053 p_4054 p_4055 p_4056 p_4057 p_4058 p_4059 p_4060 p_4061 p_4062 p_4063 p_4064 p_4065 p_4066 p_4067 p_4068 p_4069 p_4070 p_4071 p_4072 p_4073 p_4074 p_4075 p_4076 p_4077 p_4078 p_4079 p_4080 p_4081 p_4082 p_4083 p_4084 p_4085 p_4086 p_4087 p_4088 p_4089 p_4090 p_4091 p_4092 p_4093 p_4094 p_4095 p_4096 p_4097 p_4098 p_4099 p_4100 p_4101 p_4102 p_4103 p_4104 p_4105 p_4106 p_4107 p_4108 p_4109 p_4110 p_4111 p_4112 p_4113 p_4114 p_4115 p_4116 p_4117 p_4118 p_4119 p_4120 p_4121 p_4122 p_4123 p_4124 p_4125 p_4126 p_4127 p_4128 p_4129 p_4130 p_4131 p_4132 p_4133 p_4134 p_4135 p_4136 p_4137 p_4138 p_4139 p_4140 p_4141 p_4142 p_4143 p_4144 p_4145 p_4146 p_4147 p_4148 p_4149 p_4150 p_4151 p_4152 p_4153 p_4154 p_4155 p_4156 p_4157 p_4158 p_4159 p_4160 p_4161 p_4162 p_4163 p_4164 p_4165 p_4166 p_4167 p_4168 p_4169 p_4170 p_4171 p_4172 p_4173 p_4174 p_4175 p_4176 p_4177 p_4178 p_4179 p_4180 p_4181 p_4182 p_4183 p_4184 p_4185 p_4186 p_4187 p_4188 p_4189 p_4190 p_4191 p_4192 p_4193 p_4194 p_4195 p_4196 p_4197 p_4198 p_4199 p_4200 p_4201 p_4202 p_4203 p_4204 p_4205 p_4206 p_4207 p_4208 p_4209 p_4210 p_4211 p_4212 p_4213 p_4214 p_4215 p_4216 p_4217 p_4218 p_4219 p_4220 p_4221 p_4222 p_4223 p_4224 p_4225 p_4226 p_4227 p_4228 p_4229 p_4230 p_4231 p_4232 p_4233 p_4234 p_4235 p_4236 p_4237 p_4238 p_4239 p_4240 p_4241 p_4242 p_4243 p_4244 p_4245 p_4246 p_4247 p_4248 p_4249 p_4250 p_4251 p_4252 p_4253 p_4254 p_4255 p_4256 p_4257 p_4258 p_4259 p_4260 p_4261 p_4262 p_4263 p_4264 p_4265 p_4266 p_4267 p_4268 p_4269 p_4270 p_4271 p_4272 p_4273 p_4274 p_4275 p_4276 p_4277 p_4278 p_4279 p_4280 p_4281 p_4282 p_4283 p_4284 p_4285 p_4286 p_4287 p_4288 p_4289 p_4290 p_4291 p_4292 p_4293 p_4294 p_4295 p_4296 p_4297 p_4298 p_4299 p_4300 p_4301 p_4302 p_4303 p_4304 p_4305 p_4306 p_4307 p_4308 p_4309 p_4310 p_4311 p_4312 p_4313 p_4314 p_4315 p_4316 p_4317 p_4318 p_4319 p_4320 p_4321 p_4322 p_4323 p_4324 p_4325 p_4326 p_4327 p_4328 p_4329 p_4330 p_4331 p_4332 p_4333 p_4334 p_4335 p_4336 p_4337 p_4338 p_4339 p_4340 p_4341 p_4342 p_4343 p_4344 p_4345 p_4346 p_4347 p_4348 p_4349 p_4350 p_4351 p_4352 p_4353 p_4354 p_4355 p_4356 p_4357 p_4358 p_4359 p_4360 p_4361 p_4362 p_4363 p_4364 p_4365 p_4366 p_4367 p_4368 p_4369 p_4370 p_4371 p_4372 p_4373 p_4374 p_4375 p_4376 p_4377 p_4378 p_4379 p_4380 p_4381 p_4382 p_4383 p_4384 p_4385 p_4386 p_4387 p_4388 p_4389 p_4390 p_4391 p_4392 p_4393 p_4394 p_4395 p_4396 p_4397 p_4398 p_4399 p_4400 p_4401 p_4402 p_4403 p_4404 p_4405 p_4406 p_4407 p_4408 p_4409 p_4410 p_4411 p_4412 p_4413 p_4414 p_4415 p_4416 p_4417 p_4418 p_4419 p_4420 p_4421 p_4422 p_4423 p_4424 p_4425 p_4426 p_4427 p_4428 p_4429 p_4430 p_4431 p_4432 p_4433 p_4434 p_4435 p_4436 p_4437 p_4438 p_4439 p_4440 p_4441 p_4442 p_4443 p_4444 p_4445 p_4446 p_4447 p_4448 p_4449 p_4450 p_4451 p_4452 p_4453 p_4454 p_4455 p_4456 p_4457 p_4458 p_4459 p_4460 p_4461 p_4462 p_4463 p_4464 p_4465 p_4466 p_4467 p_4468 p_4469 p_4470 p_4471 p_4472 p_4473 p_4474 p_4475 p_4476 p_4477 p_4478 p_4479 p_4480 p_4481 p_4482 p_4483 p_4484 p_4485 p_4486 p_4487 p_4488 p_4489 p_4490 p_4491 p_4492 p_4493 p_4494 p_4495 p_4496 p_4497 p_4498 p_4499 p_4500 p_4501 p_4502 p_4503 p_4504 p_4505 p_4506 p_4507 p_4508 p_4509 p_4510 p_4511 p_4512 p_4513 p_4514 p_4515 p_4516 p_4517 p_4518 p_4519 p_4520 p_4521 p_4522 p_4523 p_4524 p_4525 p_4526 p_4527 p_4528 p_4529 p_4530 p_4531 p_4532 p_4533 p_4534 p_4535 p_4536 p_4537 p_4538 p_4539 p_4540 p_4541 p_4542 p_4543 p_4544 p_4545 p_4546 p_4547 p_4548 p_4549 p_4550 p_4551 p_4552 p_4553 p_4554 p_4555 p_4556 p_4557 p_4558 p_4559 p_4560 p_4561 p_4562 p_4563 p_4564 p_4565 p_4566 p_4567 p_4568 p_4569 p_4570 p_4571 p_4572 p_4573 p_4574 p_4575 p_4576 p_4577 p_4578 p_4579 p_4580 p_4581 p_4582 p_4583 p_4584 p_4585 p_4586 p_4587 p_4588 p_4589 p_4590 p_4591 p_4592 p_4593 p_4594 p_4595 p_4596 p_4597 p_4598 p_4599 p_4600 p_4601 p_4602 p_4603 p_4604 p_4605 p_4606 p_4607 p_4608 p_4609 p_4610 p_4611 p_4612 p_4613 p_4614 p_4615 p_4616 p_4617 p_4618 p_4619 p_4620 p_4621 p_4622 p_4623 p_4624 p_4625 p_4626 p_4627 p_4628 p_4629 p_4630 p_4631 p_4632 p_4633 p_4634 p_4635 p_4636 p_4637 p_4638 p_4639 p_4640 p_4641 p_4642 p_4643 p_4644 p_4645 p_4646 p_4647 p_4648 p_4649 p_4650 p_4651 p_4652 p_4653 p_4654 p_4655 p_4656 p_4657 p_4658 p_4659 p_4660 p_4661 p_4662 p_4663 p_4664 p_4665 p_4666 p_4667 p_4668 p_4669 p_4670 p_4671 p_4672 p_4673 p_4674 p_4675 p_4676 p_4677 p_4678 p_4679 p_4680 p_4681 p_4682 p_4683 p_4684 p_4685 p_4686 p_4687 p_4688 p_4689 p_4690 p_4691 p_4692 p_4693 p_4694 p_4695 p_4696 p_4697 p_4698 p_4699 p_4700 p_4701 p_4702 p_4703 p_4704 p_4705 p_4706 p_4707 p_4708 p_4709 p_4710 p_4711 p_4712 p_4713 p_4714 p_4715 p_4716 p_4717 p_4718 p_4719 p_4720 p_4721 p_4722 p_4723 p_4724 p_4725 p_4726 p_4727 p_4728 p_4729 p_4730 p_4731 p_4732 p_4733 p_4734 p_4735 p_4736 p_4737 p_4738 p_4739 p_4740 p_4741 p_4742 p_4743 p_4744 p_4745 p_4746 p_4747 p_4748 p_4749 p_4750 p_4751 p_4752 p_4753 p_4754 p_4755 p_4756 p_4757 p_4758 p_4759 p_4760 p_4761 p_4762 p_4763 p_4764 p_4765 p_4766 p_4767 p_4768 p_4769 p_4770 p_4771 p_4772 p_4773 p_4774 p_4775 p_4776 p_4777 p_4778 p_4779 p_4780 p_4781 p_4782 p_4783 p_4784 p_4785 p_4786 p_4787 p_4788 p_4789 p_4790 p_4791 p_4792 p_4793 p_4794 p_4795 p_4796 p_4797 p_4798 p_4799 p_4800 p_4801 p_4802 p_4803 p_4804 p_4805 p_4806 p_4807 p_4808 p_4809 p_4810 p_4811 p_4812 p_4813 p_4814 p_4815 p_4816 p_4817 p_4818 p_4819 p_4820 p_4821 p_4822 p_4823 p_4824 p_4825 p_4826 p_4827 p_4828 p_4829 p_4830 p_4831 p_4832 p_4833 p_4834 p_4835 p_4836 p_4837 p_4838 p_4839 p_4840 p_4841 p_4842 p_4843 p_4844 p_4845 p_4846 p_4847 p_4848 p_4849 p_4850 p_4851 p_4852 p_4853 p_4854 p_4855 p_4856 p_4857 p_4858 p_4859 p_4860 p_4861 p_4862 p_4863 p_4864 p_4865 p_4866 p_4867 p_4868 p_4869 p_4870 p_4871 p_4872 p_4873 p_4874 p_4875 p_4876 p_4877 p_4878 p_4879 p_4880 p_4881 p_4882 p_4883 p_4884 p_4885 p_4886 p_4887 p_4888 p_4889 p_4890 p_4891 p_4892 p_4893 p_4894 p_4895 p_4896 p_4897 p_4898 p_4899 p_4900 p_4901 p_4902 p_4903 p_4904 p_4905 p_4906 p_4907 p_4908 p_4909 p_4910 p_4911 p_4912 p_4913 p_4914 p_4915 p_4916 p_4917 p_4918 p_4919 p_4920 p_4921 p_4922 p_4923 p_4924 p_4925 p_4926 p_4927 p_4928 p_4929 p_4930 p_4931 p_4932 p_4933 p_4934 p_4935 p_4936 p_4937 p_4938 p_4939 p_4940 p_4941 p_4942 p_4943 p_4944 p_4945 p_4946 p_4947 p_4948 p_4949 p_4950 p_4951 p_4952 p_4953 p_4954 p_4955 p_4956 p_4957 p_4958 p_4959 p_4960 p_4961 p_4962 p_4963 p_4964 p_4965 p_4966 p_4967 p_4968 p_4969 p_4970 p_4971 p_4972 p_4973 p_4974 p_4975 p_4976 p_4977 p_4978 p_4979 p_4980 p_4981 p_4982 p_4983 p_4984 p_4985 p_4986 p_4987 p_4988 p_4989 p_4990 p_4991 p_4992 p_4993 p_4994 p_4995 p_4996 p_4997 p_4998 p_4999 p_5000 p_5001 p_5002 p_5003 p_5004 p_5005 p_5006 p_5007 p_5008 p_5009 p_5010 p_5011 p_5012 p_5013 p_5014 p_5015 p_5016 p_5017 p_5018 p_5019 p_5020 p_5021 p_5022 p_5023 p_5024 p_5025 p_5026 p_5027 p_5028 p_5029 p_5030 p_5031 p_5032 p_5033 p_5034 p_5035 p_5036 p_5037 p_5038 p_5039 p_5040 p_5041 p_5042 p_5043 p_5044 p_5045 p_5046 p_5047 p_5048 p_5049 p_5050 p_5051 p_5052 p_5053 p_5054 p_5055 p_5056 p_5057 p_5058 p_5059 p_5060 p_5061 p_5062 p_5063 p_5064 p_5065 p_5066 p_5067 p_5068 p_5069 p_5070 p_5071 p_5072 p_5073 p_5074 p_5075 p_5076 p_5077 p_5078 p_5079 p_5080 p_5081 p_5082 p_5083 p_5084 p_5085 p_5086 p_5087 p_5088 p_5089 p_5090 p_5091 p_5092 p_5093 p_5094 p_5095 p_5096 p_5097 p_5098 p_5099 p_5100 p_5101 p_5102 p_5103 p_5104 p_5105 p_5106 p_5107 p_5108 p_5109 p_5110 p_5111 p_5112 p_5113 p_5114 p_5115 p_5116 p_5117 p_5118 p_5119 p_5120 p_5121 p_5122 p_5123 p_5124 p_5125 p_5126 p_5127 p_5128 p_5129 p_5130 p_5131 p_5132 p_5133 p_5134 p_5135 p_5136 p_5137 p_5138 p_5139 p_5140 p_5141 p_5142 p_5143 p_5144 p_5145 p_5146 p_5147 p_5148 p_5149 p_5150 p_5151 p_5152 p_5153 p_5154 p_5155 p_5156 p_5157 p_5158 p_5159 p_5160 p_5161 p_5162 p_5163 p_5164 p_5165 p_5166 p_5167 p_5168 p_5169 p_5170 p_5171 p_5172 p_5173 p_5174 p_5175 p_5176 p_5177 p_5178 p_5179 p_5180 p_5181 p_5182 p_5183 p_5184 p_5185 p_5186 p_5187 p_5188 p_5189 p_5190 p_5191 p_5192 p_5193 p_5194 p_5195 p_5196 p_5197 p_5198 p_5199 p_5200 p_5201 p_5202 p_5203 p_5204 p_5205 p_5206 p_5207 p_5208 p_5209 p_5210 p_5211 p_5212 p_5213 p_5214 p_5215 p_5216 p_5217 p_5218 p_5219 p_5220 p_5221 p_5222 p_5223 p_5224 p_5225 p_5226 p_5227 p_5228 p_5229 p_5230 p_5231 p_5232 p_5233 p_5234 p_5235 p_5236 p_5237 p_5238 p_5239 p_5240 p_5241 p_5242 p_5243 p_5244 p_5245 p_5246 p_5247 p_5248 p_5249 p_5250 p_5251 p_5252 p_5253 p_5254 p_5255 p_5256 p_5257 p_5258 p_5259 p_5260 p_5261 p_5262 p_5263 p_5264 p_5265 p_5266 p_5267 p_5268 p_5269 p_5270 p_5271 p_5272 p_5273 p_5274 p_5275 p_5276 p_5277 p_5278 p_5279 p_5280 p_5281 p_5282 p_5283 p_5284 p_5285 p_5286 p_5287 p_5288 p_5289 p_5290 p_5291 p_5292 p_5293 p_5294 p_5295 p_5296 p_5297 p_5298 p_5299 p_5300 p_5301 p_5302 p_5303 p_5304 p_5305 p_5306 p_5307 p_5308 p_5309 p_5310 p_5311 p_5312 p_5313 p_5314 p_5315 p_5316 p_5317 p_5318 p_5319 p_5320 p_5321 p_5322 p_5323 p_5324 p_5325 p_5326 p_5327 p_5328 p_5329 p_5330 p_5331 p_5332 p_5333 p_5334 p_5335 p_5336 p_5337 p_5338 p_5339 p_5340 p_5341 p_5342 p_5343 p_5344 p_5345 p_5346 p_5347 p_5348 p_5349 p_5350 p_5351 p_5352 p_5353 p_5354 p_5355 p_5356 p_5357 p_5358 p_5359 p_5360 p_5361 p_5362 p_5363 p_5364 p_5365 p_5366 p_5367 p_5368 p_5369 p_5370 p_5371 p_5372 p_5373 p_5374 p_5375 p_5376 p_5377 p_5378 p_5379 p_5380 p_5381 p_5382 p_5383 p_5384 p_5385 p_5386 p_5387 p_5388 p_5389 p_5390 p_5391 p_5392 p_5393 p_5394 p_5395 p_5396 p_5397 p_5398 p_5399 p_5400 p_5401 p_5402 p_5403 p_5404 p_5405 p_5406 p_5407 p_5408 p_5409 p_5410 p_5411 p_5412 p_5413 p_5414 p_5415 p_5416 p_5417 p_5418 p_5419 p_5420 p_5421 p_5422 p_5423 p_5424 p_5425 p_5426 p_5427 p_5428 p_5429 p_5430 p_5431 p_5432 p_5433 p_5434 p_5435 p_5436 p_5437 p_5438 p_5439 p_5440 p_5441 p_5442 p_5443 p_5444 p_5445 p_5446 p_5447 p_5448 p_5449 p_5450 p_5451 p_5452 p_5453 p_5454 p_5455 p_5456 p_5457 p_5458 p_5459 p_5460 p_5461 p_5462 p_5463 p_5464 p_5465 p_5466 p_5467 p_5468 p_5469 p_5470 p_5471 p_5472 p_5473 p_5474 p_5475 p_5476 p_5477 p_5478 p_5479 p_5480 p_5481 p_5482 p_5483 p_5484 p_5485 p_5486 p_5487 p_5488 p_5489 p_5490 p_5491 p_5492 p_5493 p_5494 p_5495 p_5496 p_5497 p_5498 p_5499 p_5500 p_5501 p_5502 p_5503 p_5504 p_5505 p_5506 p_5507 p_5508 p_5509 p_5510 p_5511 p_5512 p_5513 p_5514 p_5515 p_5516 p_5517 p_5518 p_5519 p_5520 p_5521 p_5522 p_5523 p_5524 p_5525 p_5526 p_5527 p_5528 p_5529 p_5530 p_5531 p_5532 p_5533 p_5534 p_5535 p_5536 p_5537 p_5538 p_5539 p_5540 p_5541 p_5542 p_5543 p_5544 p_5545 p_5546 p_5547 p_5548 p_5549 p_5550 p_5551 p_5552 p_5553 p_5554 p_5555 p_5556 p_5557 p_5558 p_5559 p_5560 p_5561 p_5562 p_5563 p_5564 p_5565 p_5566 p_5567 p_5568 p_5569 p_5570 p_5571 p_5572 p_5573 p_5574 p_5575 p_5576 p_5577 p_5578 p_5579 p_5580 p_5581 p_5582 p_5583 p_5584 p_5585 p_5586 p_5587 p_5588 p_5589 p_5590 p_5591 p_5592 p_5593 p_5594 p_5595 p_5596 p_5597 p_5598 p_5599 p_5600 p_5601 p_5602 p_5603 p_5604 p_5605 p_5606 p_5607 p_5608 p_5609 p_5610 p_5611 p_5612 p_5613 p_5614 p_5615 p_5616 p_5617 p_5618 p_5619 p_5620 p_5621 p_5622 p_5623 p_5624 p_5625 p_5626 p_5627 p_5628 p_5629 p_5630 p_5631 p_5632 p_5633 p_5634 p_5635 p_5636 p_5637 p_5638 p_5639 p_5640 p_5641 p_5642 p_5643 p_5644 p_5645 p_5646 p_5647 p_5648 p_5649 p_5650 p_5651 p_5652 p_5653 p_5654 p_5655 p_5656 p_5657 p_5658 p_5659 p_5660 p_5661 p_5662 p_5663 p_5664 p_5665 p_5666 p_5667 p_5668 p_5669 p_5670 p_5671 p_5672 p_5673 p_5674 p_5675 p_5676 p_5677 p_5678 p_5679 p_5680 p_5681 p_5682 p_5683 p_5684 p_5685 p_5686 p_5687 p_5688 p_5689 p_5690 p_5691 p_5692 p_5693 p_5694 p_5695 p_5696 p_5697 p_5698 p_5699 p_5700 p_5701 p_5702 p_5703 p_5704 p_5705 p_5706 p_5707 p_5708 p_5709 p_5710 p_5711 p_5712 p_5713 p_5714 p_5715 p_5716 p_5717 p_5718 p_5719 p_5720 p_5721 p_5722 p_5723 p_5724 p_5725 p_5726 p_5727 p_5728 p_5729 p_5730 p_5731 p_5732 p_5733 p_5734 p_5735 p_5736 p_5737 p_5738 p_5739 p_5740 p_5741 p_5742 p_5743 p_5744 p_5745 p_5746 p_5747 p_5748 p_5749 p_5750 p_5751 p_5752 p_5753 p_5754 p_5755 p_5756 p_5757 p_5758 p_5759 p_5760 p_5761 p_5762 p_5763 p_5764 p_5765 p_5766 p_5767 p_5768 p_5769 p_5770 p_5771 p_5772 p_5773 p_5774 p_5775 p_5776 p_5777 p_5778 p_5779 p_5780 p_5781 p_5782 p_5783 p_5784 p_5785 p_5786 p_5787 p_5788 p_5789 p_5790 p_5791 p_5792 p_5793 p_5794 p_5795 p_5796 p_5797 p_5798 p_5799 p_5800 p_5801 p_5802 p_5803 p_5804 p_5805 p_5806 p_5807 p_5808 p_5809 p_5810 p_5811 p_5812 p_5813 p_5814 p_5815 p_5816 p_5817 p_5818 p_5819 p_5820 p_5821 p_5822 p_5823 p_5824 p_5825 p_5826 p_5827 p_5828 p_5829 p_5830 p_5831 p_5832 p_5833 p_5834 p_5835 p_5836 p_5837 p_5838 p_5839 p_5840 p_5841 p_5842 p_5843 p_5844 p_5845 p_5846 p_5847 p_5848 p_5849 p_5850 p_5851 p_5852 p_5853 p_5854 p_5855 p_5856 p_5857 p_5858 p_5859 p_5860 p_5861 p_5862 p_5863 p_5864 p_5865 p_5866 p_5867 p_5868 p_5869 p_5870 p_5871 p_5872 p_5873 p_5874 p_5875 p_5876 p_5877 p_5878 p_5879 p_5880 p_5881 p_5882 p_5883 p_5884 p_5885 p_5886 p_5887 p_5888 p_5889 p_5890 p_5891 p_5892 p_5893 p_5894 p_5895 p_5896 p_5897 p_5898 p_5899 p_5900 p_5901 p_5902 p_5903 p_5904 p_5905 p_5906 p_5907 p_5908 p_5909 p_5910 p_5911 p_5912 p_5913 p_5914 p_5915 p_5916 p_5917 p_5918 p_5919 p_5920 p_5921 p_5922 p_5923 p_5924 p_5925 p_5926 p_5927 p_5928 p_5929 p_5930 p_5931 p_5932 p_5933 p_5934 p_5935 p_5936 p_5937 p_5938 p_5939 p_5940 p_5941 p_5942 p_5943 p_5944 p_5945 p_5946 p_5947 p_5948 p_5949 p_5950 p_5951 p_5952 p_5953 p_5954 p_5955 p_5956 p_5957 p_5958 p_5959 p_5960 p_5961 p_5962 p_5963 p_5964 p_5965 p_5966 p_5967 p_5968 p_5969 p_5970 p_5971 p_5972 p_5973 p_5974 p_5975 p_5976 p_5977 p_5978 p_5979 p_5980 p_5981 p_5982 p_5983 p_5984 p_5985 p_5986 p_5987 p_5988 p_5989 p_5990 p_5991 p_5992 p_5993 p_5994 p_5995 p_5996 p_5997 p_5998 p_5999 p_6000 p_6001 p_6002 p_6003 p_6004 p_6005 p_6006 p_6007 p_6008 p_6009 p_6010 p_6011 p_6012 p_6013 p_6014 p_6015 p_6016 p_6017 p_6018 p_6019 p_6020 p_6021 p_6022 p_6023 p_6024 p_6025 p_6026 p_6027 p_6028 p_6029 p_6030 p_6031 p_6032 p_6033 p_6034 p_6035 p_6036 p_6037 p_6038 p_6039 p_6040 p_6041 p_6042 p_6043 p_6044 p_6045 p_6046 p_6047 p_6048 p_6049 p_6050 p_6051 p_6052 p_6053 p_6054 p_6055 p_6056 p_6057 p_6058 p_6059 p_6060 p_6061 p_6062 p_6063 p_6064 p_6065 p_6066 p_6067 p_6068 p_6069 p_6070 p_6071 p_6072 p_6073 p_6074 p_6075 p_6076 p_6077 p_6078 p_6079 p_6080 p_6081 p_6082 p_6083 p_6084 p_6085 p_6086 p_6087 p_6088 p_6089 p_6090 p_6091 p_6092 p_6093 p_6094 p_6095 p_6096 p_6097 p_6098 p_6099 p_6100 p_6101 p_6102 p_6103 p_6104 p_6105 p_6106 p_6107 p_6108 p_6109 p_6110 p_6111 p_6112 p_6113 p_6114 p_6115 p_6116 p_6117 p_6118 p_6119 p_6120 p_6121 p_6122 p_6123 p_6124 p_6125 p_6126 p_6127 p_6128 p_6129 p_6130 p_6131 p_6132 p_6133 p_6134 p_6135 p_6136 p_6137 p_6138 p_6139 p_6140 p_6141 p_6142 p_6143 p_6144 p_6145 p_6146 p_6147 p_6148 p_6149 p_6150 p_6151 p_6152 p_6153 p_6154 p_6155 p_6156 p_6157 p_6158 p_6159 p_6160 p_6161 p_6162 p_6163 p_6164 p_6165 p_6166 p_6167 p_6168 p_6169 p_6170 p_6171 p_6172 p_6173 p_6174 p_6175 p_6176 p_6177 p_6178 p_6179 p_6180 p_6181 p_6182 p_6183 p_6184 p_6185 p_6186 p_6187 p_6188 p_6189 p_6190 p_6191 p_6192 p_6193 p_6194 p_6195 p_6196 p_6197 p_6198 p_6199 p_6200 p_6201 p_6202 p_6203 p_6204 p_6205 p_6206 p_6207 p_6208 p_6209 p_6210 p_6211 p_6212 p_6213 p_6214 p_6215 p_6216 p_6217 p_6218 p_6219 p_6220 p_6221 p_6222 p_6223 p_6224 p_6225 p_6226 p_6227 p_6228 p_6229 p_6230 p_6231 p_6232 p_6233 p_6234 p_6235 p_6236 p_6237 p_6238 p_6239 p_6240 p_6241 p_6242 p_6243 p_6244 p_6245 p_6246 p_6247 p_6248 p_6249 p_6250 p_6251 p_6252 p_6253 p_6254 p_6255 p_6256 p_6257 p_6258 p_6259 p_6260 p_6261 p_6262 p_6263 p_6264 p_6265 p_6266 p_6267 p_6268 p_6269 p_6270 p_6271 p_6272 p_6273 p_6274 p_6275 p_6276 p_6277 p_6278 p_6279 p_6280 p_6281 p_6282 p_6283 p_6284 p_6285 p_6286 p_6287 p_6288 p_6289 p_6290 p_6291 p_6292 p_6293 p_6294 p_6295 p_6296 p_6297 p_6298 p_6299 p_6300 p_6301 p_6302 p_6303 p_6304 p_6305 p_6306 p_6307 p_6308 p_6309 p_6310 p_6311 p_6312 p_6313 p_6314 p_6315 p_6316 p_6317 p_6318 p_6319 p_6320 p_6321 p_6322 p_6323 p_6324 p_6325 p_6326 p_6327 p_6328 p_6329 p_6330 p_6331 p_6332 p_6333 p_6334 p_6335 p_6336 p_6337 p_6338 p_6339 p_6340 p_6341 p_6342 p_6343 p_6344 p_6345 p_6346 p_6347 p_6348 p_6349 p_6350 p_6351 p_6352 p_6353 p_6354 p_6355 p_6356 p_6357 p_6358 p_6359 p_6360 p_6361 p_6362 p_6363 p_6364 p_6365 p_6366 p_6367 p_6368 p_6369 p_6370 p_6371 p_6372 p_6373 p_6374 p_6375 p_6376 p_6377 p_6378 p_6379 p_6380 p_6381 p_6382 p_6383 p_6384 p_6385 p_6386 p_6387 p_6388 p_6389 p_6390 p_6391 p_6392 p_6393 p_6394 p_6395 p_6396 p_6397 p_6398 p_6399 p_6400 p_6401 p_6402 p_6403 p_6404 p_6405 p_6406 p_6407 p_6408 p_6409 p_6410 p_6411 p_6412 p_6413 p_6414 p_6415 p_6416 p_6417 p_6418 p_6419 p_6420 p_6421 p_6422 p_6423 p_6424 p_6425 p_6426 p_6427 p_6428 p_6429 p_6430 p_6431 p_6432 p_6433 p_6434 p_6435 p_6436 p_6437 p_6438 p_6439 p_6440 p_6441 p_6442 p_6443 p_6444 p_6445 p_6446 p_6447 p_6448 p_6449 p_6450 p_6451 p_6452 p_6453 p_6454 p_6455 p_6456 p_6457 p_6458 p_6459 p_6460 p_6461 p_6462 p_6463 p_6464 p_6465 p_6466 p_6467 p_6468 p_6469 p_6470 p_6471 p_6472 p_6473 p_6474 p_6475 p_6476 p_6477 p_6478 p_6479 p_6480 p_6481 p_6482 p_6483 p_6484 p_6485 p_6486 p_6487 p_6488 p_6489 p_6490 p_6491 p_6492 p_6493 p_6494 p_6495 p_6496 p_6497 p_6498 p_6499 p_6500 p_6501 p_6502 p_6503 p_6504 p_6505 p_6506 p_6507 p_6508 p_6509 p_6510 p_6511 p_6512 p_6513 p_6514 p_6515 p_6516 p_6517 p_6518 p_6519 p_6520 p_6521 p_6522 p_6523 p_6524 p_6525 p_6526 p_6527 p_6528 p_6529 p_6530 p_6531 p_6532 p_6533 p_6534 p_6535 p_6536 p_6537 p_6538 p_6539 p_6540 p_6541 p_6542 p_6543 p_6544 p_6545 p_6546 p_6547 p_6548 p_6549 p_6550 p_6551 p_6552 p_6553 p_6554 p_6555 p_6556 p_6557 p_6558 p_6559 p_6560 p_6561 p_6562 p_6563 p_6564 p_6565 p_6566 p_6567 p_6568 p_6569 p_6570 p_6571 p_6572 p_6573 p_6574 p_6575 p_6576 p_6577 p_6578 p_6579 p_6580 p_6581 p_6582 p_6583 p_6584 p_6585 p_6586 p_6587 p_6588 p_6589 p_6590 p_6591 p_6592 p_6593 p_6594 p_6595 p_6596 p_6597 p_6598 p_6599 p_6600 p_6601 p_6602 p_6603 p_6604 p_6605 p_6606 p_6607 p_6608 p_6609 p_6610 p_6611 p_6612 p_6613 p_6614 p_6615 p_6616 p_6617 p_6618 p_6619 p_6620 p_6621 p_6622 p_6623 p_6624 p_6625 p_6626 p_6627 p_6628 p_6629 p_6630 p_6631 p_6632 p_6633 p_6634 p_6635 p_6636 p_6637 p_6638 p_6639 p_6640 p_6641 p_6642 p_6643 p_6644 p_6645 p_6646 p_6647 p_6648 p_6649 p_6650 p_6651 p_6652 p_6653 p_6654 p_6655 p_6656 p_6657 p_6658 p_6659 p_6660 p_6661 p_6662 p_6663 p_6664 p_6665 p_6666 p_6667 p_6668 p_6669 p_6670 p_6671 p_6672 p_6673 p_6674 p_6675 p_6676 p_6677 p_6678 p_6679 p_6680 p_6681 p_6682 p_6683 p_6684 p_6685 p_6686 p_6687 p_6688 p_6689 p_6690 p_6691 p_6692 p_6693 p_6694 p_6695 p_6696 p_6697 p_6698 p_6699 p_6700 p_6701 p_6702 p_6703 p_6704 p_6705 p_6706 p_6707 p_6708 p_6709 p_6710 p_6711 p_6712 p_6713 p_6714 p_6715 p_6716 p_6717 p_6718 p_6719 p_6720 p_6721 p_6722 p_6723 p_6724 p_6725 p_6726 p_6727 p_6728 p_6729 p_6730 p_6731 p_6732 p_6733 p_6734 p_6735 p_6736 p_6737 p_6738 p_6739 p_6740 p_6741 p_6742 p_6743 p_6744 p_6745 p_6746 p_6747 p_6748 p_6749 p_6750 p_6751 p_6752 p_6753 p_6754 p_6755 p_6756 p_6757 p_6758 p_6759 p_6760 p_6761 p_6762 p_6763 p_6764 p_6765 p_6766 p_6767 p_6768 p_6769 p_6770 p_6771 p_6772 p_6773 p_6774 p_6775 p_6776 p_6777 p_6778 p_6779 p_6780 p_6781 p_6782 p_6783 p_6784 p_6785 p_6786 p_6787 p_6788 p_6789 p_6790 p_6791 p_6792 p_6793 p_6794 p_6795 p_6796 p_6797 p_6798 p_6799 p_6800 p_6801 p_6802 p_6803 p_6804 p_6805 p_6806 p_6807 p_6808 p_6809 p_6810 p_6811 p_6812 p_6813 p_6814 p_6815 p_6816 p_6817 p_6818 p_6819 p_6820 p_6821 p_6822 p_6823 p_6824 p_6825 p_6826 p_6827 p_6828 p_6829 p_6830 p_6831 p_6832 p_6833 p_6834 p_6835 p_6836 p_6837 p_6838 p_6839 p_6840 p_6841 p_6842 p_6843 p_6844 p_6845 p_6846 p_6847 p_6848 p_6849 p_6850 p_6851 p_6852 p_6853 p_6854 p_6855 p_6856 p_6857 p_6858 p_6859 p_6860 p_6861 p_6862 p_6863 p_6864 p_6865 p_6866 p_6867 p_6868 p_6869 p_6870 p_6871 p_6872 p_6873 p_6874 p_6875 p_6876 p_6877 p_6878 p_6879 p_6880 p_6881 p_6882 p_6883 p_6884 p_6885 p_6886 p_6887 p_6888 p_6889 p_6890 p_6891 p_6892 p_6893 p_6894 p_6895 p_6896 p_6897 p_6898 p_6899 p_6900 p_6901 p_6902 p_6903 p_6904 p_6905 p_6906 p_6907 p_6908 p_6909 p_6910 p_6911 p_6912 p_6913 p_6914 p_6915 p_6916 p_6917 p_6918 p_6919 p_6920 p_6921 p_6922 p_6923 p_6924 p_6925 p_6926 p_6927 p_6928 p_6929 p_6930 p_6931 p_6932 p_6933 p_6934 p_6935 p_6936 p_6937 p_6938 p_6939 p_6940 p_6941 p_6942 p_6943 p_6944 p_6945 p_6946 p_6947 p_6948 p_6949 p_6950 p_6951 p_6952 p_6953 p_6954 p_6955 p_6956 p_6957 p_6958 p_6959 p_6960 p_6961 p_6962 p_6963 p_6964 p_6965 p_6966 p_6967 p_6968 p_6969 p_6970 p_6971 p_6972 p_6973 p_6974 p_6975 p_6976 p_6977 p_6978 p_6979 p_6980 p_6981 p_6982 p_6983 p_6984 p_6985 p_6986 p_6987 p_6988 p_6989 p_6990 p_6991 p_6992 p_6993 p_6994 p_6995 p_6996 p_6997 p_6998 p_6999 p_7000 p_7001 p_7002 p_7003 p_7004 p_7005 p_7006 p_7007 p_7008 p_7009 p_7010 p_7011 p_7012 p_7013 p_7014 p_7015 p_7016 p_7017 p_7018 p_7019 p_7020 p_7021 p_7022 p_7023 p_7024 p_7025 p_7026 p_7027 p_7028 p_7029 p_7030 p_7031 p_7032 p_7033 p_7034 p_7035 p_7036 p_7037 p_7038 p_7039 p_7040 p_7041 p_7042 p_7043 p_7044 p_7045 p_7046 p_7047 p_7048 p_7049 p_7050 p_7051 p_7052 p_7053 p_7054 p_7055 p_7056 p_7057 p_7058 p_7059 p_7060 p_7061 p_7062 p_7063 p_7064 p_7065 p_7066 p_7067 p_7068 p_7069 p_7070 p_7071 p_7072 p_7073 p_7074 p_7075 p_7076 p_7077 p_7078 p_7079 p_7080 p_7081 p_7082 p_7083 p_7084 p_7085 p_7086 p_7087 p_7088 p_7089 p_7090 p_7091 p_7092 p_7093 p_7094 p_7095 p_7096 p_7097 p_7098 p_7099 p_7100 p_7101 p_7102 p_7103 p_7104 p_7105 p_7106 p_7107 p_7108 p_7109 p_7110 p_7111 p_7112 p_7113 p_7114 p_7115 p_7116 p_7117 p_7118 p_7119 p_7120 p_7121 p_7122 p_7123 p_7124 p_7125 p_7126 p_7127 p_7128 p_7129 p_7130 p_7131 p_7132 p_7133 p_7134 p_7135 p_7136 p_7137 p_7138 p_7139 p_7140 p_7141 p_7142 p_7143 p_7144 p_7145 p_7146 p_7147 p_7148 p_7149 p_7150 p_7151 p_7152 p_7153 p_7154 p_7155 p_7156 p_7157 p_7158 p_7159 p_7160 p_7161 p_7162 p_7163 p_7164 p_7165 p_7166 p_7167 p_7168 p_7169 p_7170 p_7171 p_7172 p_7173 p_7174 p_7175 p_7176 p_7177 p_7178 p_7179 p_7180 p_7181 p_7182 p_7183 p_7184 p_7185 p_7186 p_7187 p_7188 p_7189 p_7190 p_7191 p_7192 p_7193 p_7194 p_7195 p_7196 p_7197 p_7198 p_7199 p_7200 p_7201 p_7202 p_7203 p_7204 p_7205 p_7206 p_7207 p_7208 p_7209 p_7210 p_7211 p_7212 p_7213 p_7214 p_7215 p_7216 p_7217 p_7218 p_7219 p_7220 p_7221 p_7222 p_7223 p_7224 p_7225 p_7226 p_7227 p_7228 p_7229 p_7230 p_7231 p_7232 p_7233 p_7234 p_7235 p_7236 p_7237 p_7238 p_7239 p_7240 p_7241 p_7242 p_7243 p_7244 p_7245 p_7246 p_7247 p_7248 p_7249 p_7250 p_7251 p_7252 p_7253 p_7254 p_7255 p_7256 p_7257 p_7258 p_7259 p_7260 p_7261 p_7262 p_7263 p_7264 p_7265 p_7266 p_7267 p_7268 p_7269 p_7270 p_7271 p_7272 p_7273 p_7274 p_7275 p_7276 p_7277 p_7278 p_7279 p_7280 p_7281 p_7282 p_7283 p_7284 p_7285 p_7286 p_7287 p_7288 p_7289 p_7290 p_7291 p_7292 p_7293 p_7294 p_7295 p_7296 p_7297 p_7298 p_7299 p_7300 p_7301 p_7302 p_7303 p_7304 p_7305 p_7306 p_7307 p_7308 p_7309 p_7310 p_7311 p_7312 p_7313 p_7314 p_7315 p_7316 p_7317 p_7318 p_7319 p_7320 p_7321 p_7322 p_7323 p_7324 p_7325 p_7326 p_7327 p_7328 p_7329 p_7330 p_7331 p_7332 p_7333 p_7334 p_7335 p_7336 p_7337 p_7338 p_7339 p_7340 p_7341 p_7342 p_7343 p_7344 p_7345 p_7346 p_7347 p_7348 p_7349 p_7350 p_7351 p_7352 p_7353 p_7354 p_7355 p_7356 p_7357 p_7358 p_7359 p_7360 p_7361 p_7362 p_7363 p_7364 p_7365 p_7366 p_7367 p_7368 p_7369 p_7370 p_7371 p_7372 p_7373 p_7374 p_7375 p_7376 p_7377 p_7378 p_7379 p_7380 p_7381 p_7382 p_7383 p_7384 p_7385 p_7386 p_7387 p_7388 p_7389 p_7390 p_7391 p_7392 p_7393 p_7394 p_7395 p_7396 p_7397 p_7398 p_7399 p_7400 p_7401 p_7402 p_7403 p_7404 p_7405 p_7406 p_7407 p_7408 p_7409 p_7410 p_7411 p_7412 p_7413 p_7414 p_7415 p_7416 p_7417 p_7418 p_7419 p_7420 p_7421 p_7422 p_7423 p_7424 p_7425 p_7426 p_7427 p_7428 p_7429 p_7430 p_7431 p_7432 p_7433 p_7434 p_7435 p_7436 p_7437 p_7438 p_7439 p_7440 p_7441 p_7442 p_7443 p_7444 p_7445 p_7446 p_7447 p_7448 p_7449 p_7450 p_7451 p_7452 p_7453 p_7454 p_7455 p_7456 p_7457 p_7458 p_7459 p_7460 p_7461 p_7462 p_7463 p_7464 p_7465 p_7466 p_7467 p_7468 p_7469 p_7470 p_7471 p_7472 p_7473 p_7474 p_7475 p_7476 p_7477 p_7478 p_7479 p_7480 p_7481 p_7482 p_7483 p_7484 p_7485 p_7486 p_7487 p_7488 p_7489 p_7490 p_7491 p_7492 p_7493 p_7494 p_7495 p_7496 p_7497 p_7498 p_7499 p_7500 p_7501 p_7502 p_7503 p_7504 p_7505 p_7506 p_7507 p_7508 p_7509 p_7510 p_7511 p_7512 p_7513 p_7514 p_7515 p_7516 p_7517 p_7518 p_7519 p_7520 p_7521 p_7522 p_7523 p_7524 p_7525 p_7526 p_7527 p_7528 p_7529 p_7530 p_7531 p_7532 p_7533 p_7534 p_7535 p_7536 p_7537 p_7538 p_7539 p_7540 p_7541 p_7542 p_7543 p_7544 p_7545 p_7546 p_7547 p_7548 p_7549 p_7550 p_7551 p_7552 p_7553 p_7554 p_7555 p_7556 p_7557 p_7558 p_7559 p_7560 p_7561 p_7562 p_7563 p_7564 p_7565 p_7566 p_7567 p_7568 p_7569 p_7570 p_7571 p_7572 p_7573 p_7574 p_7575 p_7576 p_7577 p_7578 p_7579 p_7580 p_7581 p_7582 p_7583 p_7584 p_7585 p_7586 p_7587 p_7588 p_7589 p_7590 p_7591 p_7592 p_7593 p_7594 p_7595 p_7596 p_7597 p_7598 p_7599 p_7600 p_7601 p_7602 p_7603 p_7604 p_7605 p_7606 p_7607 p_7608 p_7609 p_7610 p_7611 p_7612 p_7613 p_7614 p_7615 p_7616 p_7617 p_7618 p_7619 p_7620 p_7621 p_7622 p_7623 p_7624 p_7625 p_7626 p_7627 p_7628 p_7629 p_7630 p_7631 p_7632 p_7633 p_7634 p_7635 p_7636 p_7637 p_7638 p_7639 p_7640 p_7641 p_7642 p_7643 p_7644 p_7645 p_7646 p_7647 p_7648 p_7649 p_7650 p_7651 p_7652 p_7653 p_7654 p_7655 p_7656 p_7657 p_7658 p_7659 p_7660 p_7661 p_7662 p_7663 p_7664 p_7665 p_7666 p_7667 p_7668 p_7669 p_7670 p_7671 p_7672 p_7673 p_7674 p_7675 p_7676 p_7677 p_7678 p_7679 p_7680 p_7681 p_7682 p_7683 p_7684 p_7685 p_7686 p_7687 p_7688 p_7689 p_7690 p_7691 p_7692 p_7693 p_7694 p_7695 p_7696 p_7697 p_7698 p_7699 p_7700 p_7701 p_7702 p_7703 p_7704 p_7705 p_7706 p_7707 p_7708 p_7709 p_7710 p_7711 p_7712 p_7713 p_7714 p_7715 p_7716 p_7717 p_7718 p_7719 p_7720 p_7721 p_7722 p_7723 p_7724 p_7725 p_7726 p_7727 p_7728 p_7729 p_7730 p_7731 p_7732 p_7733 p_7734 p_7735 p_7736 p_7737 p_7738 p_7739 p_7740 p_7741 p_7742 p_7743 p_7744 p_7745 p_7746 p_7747 p_7748 p_7749 p_7750 p_7751 p_7752 p_7753 p_7754 p_7755 p_7756 p_7757 p_7758 p_7759 p_7760 p_7761 p_7762 p_7763 p_7764 p_7765 p_7766 p_7767 p_7768 p_7769 p_7770 p_7771 p_7772 p_7773 p_7774 p_7775 p_7776 p_7777 p_7778 p_7779 p_7780 p_7781 p_7782 p_7783 p_7784 p_7785 p_7786 p_7787 p_7788 p_7789 p_7790 p_7791 p_7792 p_7793 p_7794 p_7795 p_7796 p_7797 p_7798 p_7799 p_7800 p_7801 p_7802 p_7803 p_7804 p_7805 p_7806 p_7807 p_7808 p_7809 p_7810 p_7811 p_7812 p_7813 p_7814 p_7815 p_7816 p_7817 p_7818 p_7819 p_7820 p_7821 p_7822 p_7823 p_7824 p_7825 p_7826 p_7827 p_7828 p_7829 p_7830 p_7831 p_7832 p_7833 p_7834 p_7835 p_7836 p_7837 p_7838 p_7839 p_7840 p_7841 p_7842 p_7843 p_7844 p_7845 p_7846 p_7847 p_7848 p_7849 p_7850 p_7851 p_7852 p_7853 p_7854 p_7855 p_7856 p_7857 p_7858 p_7859 p_7860 p_7861 p_7862 p_7863 p_7864 p_7865 p_7866 p_7867 p_7868 p_7869 p_7870 p_7871 p_7872 p_7873 p_7874 p_7875 p_7876 p_7877 p_7878 p_7879 p_7880 p_7881 p_7882 p_7883 p_7884 p_7885 p_7886 p_7887 p_7888 p_7889 p_7890 p_7891 p_7892 p_7893 p_7894 p_7895 p_7896 p_7897 p_7898 p_7899 p_7900 p_7901 p_7902 p_7903 p_7904 p_7905 p_7906 p_7907 p_7908 p_7909 p_7910 p_7911 p_7912 p_7913 p_7914 p_7915 p_7916 p_7917 p_7918 p_7919 p_7920 p_7921 p_7922 p_7923 p_7924 p_7925 p_7926 p_7927 p_7928 p_7929 p_7930 p_7931 p_7932 p_7933 p_7934 p_7935 p_7936 p_7937 p_7938 p_7939 p_7940 p_7941 p_7942 p_7943 p_7944 p_7945 p_7946 p_7947 p_7948 p_7949 p_7950 p_7951 p_7952 p_7953 p_7954 p_7955 p_7956 p_7957 p_7958 p_7959 p_7960 p_7961 p_7962 p_7963 p_7964 p_7965 p_7966 p_7967 p_7968 p_7969 p_7970 p_7971 p_7972 p_7973 p_7974 p_7975 p_7976 p_7977 p_7978 p_7979 p_7980 p_7981 p_7982 p_7983 p_7984 p_7985 p_7986 p_7987 p_7988 p_7989 p_7990 p_7991 p_7992 p_7993 p_7994 p_7995 p_7996 p_7997 p_7998 p_7999 p_8000 p_8001 p_8002 p_8003 p_8004 p_8005 p_8006 p_8007 p_8008 p_8009 p_8010 p_8011 p_8012 p_8013 p_8014 p_8015 p_8016 p_8017 p_8018 p_8019 p_8020 p_8021 p_8022 p_8023 p_8024 p_8025 p_8026 p_8027 p_8028 p_8029 p_8030 p_8031 p_8032 p_8033 p_8034 p_8035 p_8036 p_8037 p_8038 p_8039 p_8040 p_8041 p_8042 p_8043 p_8044 p_8045 p_8046 p_8047 p_8048 p_8049 p_8050 p_8051 p_8052 p_8053 p_8054 p_8055 p_8056 p_8057 p_8058 p_8059 p_8060 p_8061 p_8062 p_8063 p_8064 p_8065 p_8066 p_8067 p_8068 p_8069 p_8070 p_8071 p_8072 p_8073 p_8074 p_8075 p_8076 p_8077 p_8078 p_8079 p_8080 p_8081 p_8082 p_8083 p_8084 p_8085 p_8086 p_8087 p_8088 p_8089 p_8090 p_8091 p_8092 p_8093 p_8094 p_8095 p_8096 p_8097 p_8098 p_8099 p_8100 p_8101 p_8102 p_8103 p_8104 p_8105 p_8106 p_8107 p_8108 p_8109 p_8110 p_8111 p_8112 p_8113 p_8114 p_8115 p_8116 p_8117 p_8118 p_8119 p_8120 p_8121 p_8122 p_8123 p_8124 p_8125 p_8126 p_8127 p_8128 p_8129 p_8130 p_8131 p_8132 p_8133 p_8134 p_8135 p_8136 p_8137 p_8138 p_8139 p_8140 p_8141 p_8142 p_8143 p_8144 p_8145 p_8146 p_8147 p_8148 p_8149 p_8150 p_8151 p_8152 p_8153 p_8154 p_8155 p_8156 p_8157 p_8158 p_8159 p_8160 p_8161 p_8162 p_8163 p_8164 p_8165 p_8166 p_8167 p_8168 p_8169 p_8170 p_8171 p_8172 p_8173 p_8174 p_8175 p_8176 p_8177 p_8178 p_8179 p_8180 p_8181 p_8182 p_8183 p_8184 p_8185 p_8186 p_8187 p_8188 p_8189 p_8190 p_8191 p_8192 p_8193 p_8194 p_8195 p_8196 p_8197 p_8198 p_8199 p_8200 p_8201 p_8202 p_8203 p_8204 p_8205 p_8206 p_8207 p_8208 p_8209 p_8210 p_8211 p_8212 p_8213 p_8214 p_8215 p_8216 p_8217 p_8218 p_8219 p_8220 p_8221 p_8222 p_8223 p_8224 p_8225 p_8226 p_8227 p_8228 p_8229 p_8230 p_8231 p_8232 p_8233 p_8234 p_8235 p_8236 p_8237 p_8238 p_8239 p_8240 p_8241 p_8242 p_8243 p_8244 p_8245 p_8246 p_8247 p_8248 p_8249 p_8250 p_8251 p_8252 p_8253 p_8254 p_8255 p_8256 p_8257 p_8258 p_8259 p_8260 p_8261 p_8262 p_8263 p_8264 p_8265 p_8266 p_8267 p_8268 p_8269 p_8270 p_8271 p_8272 p_8273 p_8274 p_8275 p_8276 p_8277 p_8278 p_8279 p_8280 p_8281 p_8282 p_8283 p_8284 p_8285 p_8286 p_8287 p_8288 p_8289 p_8290 p_8291 p_8292 p_8293 p_8294 p_8295 p_8296 p_8297 p_8298 p_8299 p_8300 p_8301 p_8302 p_8303 p_8304 p_8305 p_8306 p_8307 p_8308 p_8309 p_8310 p_8311 p_8312 p_8313 p_8314 p_8315 p_8316 p_8317 p_8318 p_8319 p_8320 p_8321 p_8322 p_8323 p_8324 p_8325 p_8326 p_8327 p_8328 p_8329 p_8330 p_8331 p_8332 p_8333 p_8334 p_8335 p_8336 p_8337 p_8338 p_8339 p_8340 p_8341 p_8342 p_8343 p_8344 p_8345 p_8346 p_8347 p_8348 p_8349 p_8350 p_8351 p_8352 p_8353 p_8354 p_8355 p_8356 p_8357 p_8358 p_8359 p_8360 p_8361 p_8362 p_8363 p_8364 p_8365 p_8366 p_8367 p_8368 p_8369 p_8370 p_8371 p_8372 p_8373 p_8374 p_8375 p_8376 p_8377 p_8378 p_8379 p_8380 p_8381 p_8382 p_8383 p_8384 p_8385 p_8386 p_8387 p_8388 p_8389 p_8390 p_8391 p_8392 p_8393 p_8394 p_8395 p_8396 p_8397 p_8398 p_8399 p_8400 p_8401 p_8402 p_8403 p_8404 p_8405 p_8406 p_8407 p_8408 p_8409 p_8410 p_8411 p_8412 p_8413 p_8414 p_8415 p_8416 p_8417 p_8418 p_8419 p_8420 p_8421 p_8422 p_8423 p_8424 p_8425 p_8426 p_8427 p_8428 p_8429 p_8430 p_8431 p_8432 p_8433 p_8434 p_8435 p_8436 p_8437 p_8438 p_8439 p_8440 p_8441 p_8442 p_8443 p_8444 p_8445 p_8446 p_8447 p_8448 p_8449 p_8450 p_8451 p_8452 p_8453 p_8454 p_8455 p_8456 p_8457 p_8458 p_8459 p_8460 p_8461 p_8462 p_8463 p_8464 p_8465 p_8466 p_8467 p_8468 p_8469 p_8470 p_8471 p_8472 p_8473 p_8474 p_8475 p_8476 p_8477 p_8478 p_8479 p_8480 p_8481 p_8482 p_8483 p_8484 p_8485 p_8486 p_8487 p_8488 p_8489 p_8490 p_8491 p_8492 p_8493 p_8494 p_8495 p_8496 p_8497 p_8498 p_8499 p_8500 p_8501 p_8502 p_8503 p_8504 p_8505 p_8506 p_8507 p_8508 p_8509 p_8510 p_8511 p_8512 p_8513 p_8514 p_8515 p_8516 p_8517 p_8518 p_8519 p_8520 p_8521 p_8522 p_8523 p_8524 p_8525 p_8526 p_8527 p_8528 p_8529 p_8530 p_8531 p_8532 p_8533 p_8534 p_8535 p_8536 p_8537 p_8538 p_8539 p_8540 p_8541 p_8542 p_8543 p_8544 p_8545 p_8546 p_8547 p_8548 p_8549 p_8550 p_8551 p_8552 p_8553 p_8554 p_8555 p_8556 p_8557 p_8558 p_8559 p_8560 p_8561 p_8562 p_8563 p_8564 p_8565 p_8566 p_8567 p_8568 p_8569 p_8570 p_8571 p_8572 p_8573 p_8574 p_8575 p_8576 p_8577 p_8578 p_8579 p_8580 p_8581 p_8582 p_8583 p_8584 p_8585 p_8586 p_8587 p_8588 p_8589 p_8590 p_8591 p_8592 p_8593 p_8594 p_8595 p_8596 p_8597 p_8598 p_8599 p_8600 p_8601 p_8602 p_8603 p_8604 p_8605 p_8606 p_8607 p_8608 p_8609 p_8610 p_8611 p_8612 p_8613 p_8614 p_8615 p_8616 p_8617 p_8618 p_8619 p_8620 p_8621 p_8622 p_8623 p_8624 p_8625 p_8626 p_8627 p_8628 p_8629 p_8630 p_8631 p_8632 p_8633 p_8634 p_8635 p_8636 p_8637 p_8638 p_8639 p_8640 p_8641 p_8642 p_8643 p_8644 p_8645 p_8646 p_8647 p_8648 p_8649 p_8650 p_8651 p_8652 p_8653 p_8654 p_8655 p_8656 p_8657 p_8658 p_8659 p_8660 p_8661 p_8662 p_8663 p_8664 p_8665 p_8666 p_8667 p_8668 p_8669 p_8670 p_8671 p_8672 p_8673 p_8674 p_8675 p_8676 p_8677 p_8678 p_8679 p_8680 p_8681 p_8682 p_8683 p_8684 p_8685 p_8686 p_8687 p_8688 p_8689 p_8690 p_8691 p_8692 p_8693 p_8694 p_8695 p_8696 p_8697 p_8698 p_8699 p_8700 p_8701 p_8702 p_8703 p_8704 p_8705 p_8706 p_8707 p_8708 p_8709 p_8710 p_8711 p_8712 p_8713 p_8714 p_8715 p_8716 p_8717 p_8718 p_8719 p_8720 p_8721 p_8722 p_8723 p_8724 p_8725 p_8726 p_8727 p_8728 p_8729 p_8730 p_8731 p_8732 p_8733 p_8734 p_8735 p_8736 p_8737 p_8738 p_8739 p_8740 p_8741 p_8742 p_8743 p_8744 p_8745 p_8746 p_8747 p_8748 p_8749 p_8750 p_8751 p_8752 p_8753 p_8754 p_8755 p_8756 p_8757 p_8758 p_8759 p_8760 p_8761 p_8762 p_8763 p_8764 p_8765 p_8766 p_8767 p_8768 p_8769 p_8770 p_8771 p_8772 p_8773 p_8774 p_8775 p_8776 p_8777 p_8778 p_8779 p_8780 p_8781 p_8782 p_8783 p_8784 p_8785 p_8786 p_8787 p_8788 p_8789 p_8790 p_8791 p_8792 p_8793 p_8794 p_8795 p_8796 p_8797 p_8798 p_8799 p_8800 p_8801 p_8802 p_8803 p_8804 p_8805 p_8806 p_8807 p_8808 p_8809 p_8810 p_8811 p_8812 p_8813 p_8814 p_8815 p_8816 p_8817 p_8818 p_8819 p_8820 p_8821 p_8822 p_8823 p_8824 p_8825 p_8826 p_8827 p_8828 p_8829 p_8830 p_8831 p_8832 p_8833 p_8834 p_8835 p_8836 p_8837 p_8838 p_8839 p_8840 p_8841 p_8842 p_8843 p_8844 p_8845 p_8846 p_8847 p_8848 p_8849 p_8850 p_8851 p_8852 p_8853 p_8854 p_8855 p_8856 p_8857 p_8858 p_8859 p_8860 p_8861 p_8862 p_8863 p_8864 p_8865 p_8866 p_8867 p_8868 p_8869 p_8870 p_8871 p_8872 p_8873 p_8874 p_8875 p_8876 p_8877 p_8878 p_8879 p_8880 p_8881 p_8882 p_8883 p_8884 p_8885 p_8886 p_8887 p_8888 p_8889 p_8890 p_8891 p_8892 p_8893 p_8894 p_8895 p_8896 p_8897 p_8898 p_8899 p_8900 p_8901 p_8902 p_8903 p_8904 p_8905 p_8906 p_8907 p_8908 p_8909 p_8910 p_8911 p_8912 p_8913 p_8914 p_8915 p_8916 p_8917 p_8918 p_8919 p_8920 p_8921 p_8922 p_8923 p_8924 p_8925 p_8926 p_8927 p_8928 p_8929 p_8930 p_8931 p_8932 p_8933 p_8934 p_8935 p_8936 p_8937 p_8938 p_8939 p_8940 p_8941 p_8942 p_8943 p_8944 p_8945 p_8946 p_8947 p_8948 p_8949 p_8950 p_8951 p_8952 p_8953 p_8954 p_8955 p_8956 p_8957 p_8958 p_8959 p_8960 p_8961 p_8962 p_8963 p_8964 p_8965 p_8966 p_8967 p_8968 p_8969 p_8970 p_8971 p_8972 p_8973 p_8974 p_8975 p_8976 p_8977 p_8978 p_8979 p_8980 p_8981 p_8982 p_8983 p_8984 p_8985 p_8986 p_8987 p_8988 p_8989 p_8990 p_8991 p_8992 p_8993 p_8994 p_8995 p_8996 p_8997 p_8998 p_8999 p_9000 p_9001 p_9002 p_9003 p_9004 p_9005 p_9006 p_9007 p_9008 p_9009 p_9010 p_9011 p_9012 p_9013 p_9014 p_9015 p_9016 p_9017 p_9018 p_9019 p_9020 p_9021 p_9022 p_9023 p_9024 p_9025 p_9026 p_9027 p_9028 p_9029 p_9030 p_9031 p_9032 p_9033 p_9034 p_9035 p_9036 p_9037 p_9038 p_9039 p_9040 p_9041 p_9042 p_9043 p_9044 p_9045 p_9046 p_9047 p_9048 p_9049 p_9050 p_9051 p_9052 p_9053 p_9054 p_9055 p_9056 p_9057 p_9058 p_9059 p_9060 p_9061 p_9062 p_9063 p_9064 p_9065 p_9066 p_9067 p_9068 p_9069 p_9070 p_9071 p_9072 p_9073 p_9074 p_9075 p_9076 p_9077 p_9078 p_9079 p_9080 p_9081 p_9082 p_9083 p_9084 p_9085 p_9086 p_9087 p_9088 p_9089 p_9090 p_9091 p_9092 p_9093 p_9094 p_9095 p_9096 p_9097 p_9098 p_9099 p_9100 p_9101 p_9102 p_9103 p_9104 p_9105 p_9106 p_9107 p_9108 p_9109 p_9110 p_9111 p_9112 p_9113 p_9114 p_9115 p_9116 p_9117 p_9118 p_9119 p_9120 p_9121 p_9122 p_9123 p_9124 p_9125 p_9126 p_9127 p_9128 p_9129 p_9130 p_9131 p_9132 p_9133 p_9134 p_9135 p_9136 p_9137 p_9138 p_9139 p_9140 p_9141 p_9142 p_9143 p_9144 p_9145 p_9146 p_9147 p_9148 p_9149 p_9150 p_9151 p_9152 p_9153 p_9154 p_9155 p_9156 p_9157 p_9158 p_9159 p_9160 p_9161 p_9162 p_9163 p_9164 p_9165 p_9166 p_9167 p_9168 p_9169 p_9170 p_9171 p_9172 p_9173 p_9174 p_9175 p_9176 p_9177 p_9178 p_9179 p_9180 p_9181 p_9182 p_9183 p_9184 p_9185 p_9186 p_9187 p_9188 p_9189 p_9190 p_9191 p_9192 p_9193 p_9194 p_9195 p_9196 p_9197 p_9198 p_9199 p_9200 p_9201 p_9202 p_9203 p_9204 p_9205 p_9206 p_9207 p_9208 p_9209 p_9210 p_9211 p_9212 p_9213 p_9214 p_9215 p_9216 p_9217 p_9218 p_9219 p_9220 p_9221 p_9222 p_9223 p_9224 p_9225 p_9226 p_9227 p_9228 p_9229 p_9230 p_9231 p_9232 p_9233 p_9234 p_9235 p_9236 p_9237 p_9238 p_9239 p_9240 p_9241 p_9242 p_9243 p_9244 p_9245 p_9246 p_9247 p_9248 p_9249 p_9250 p_9251 p_9252 p_9253 p_9254 p_9255 p_9256 p_9257 p_9258 p_9259 p_9260 p_9261 p_9262 p_9263 p_9264 p_9265 p_9266 p_9267 p_9268 p_9269 p_9270 p_9271 p_9272 p_9273 p_9274 p_9275 p_9276 p_9277 p_9278 p_9279 p_9280 p_9281 p_9282 p_9283 p_9284 p_9285 p_9286 p_9287 p_9288 p_9289 p_9290 p_9291 p_9292 p_9293 p_9294 p_9295 p_9296 p_9297 p_9298 p_9299 p_9300 p_9301 p_9302 p_9303 p_9304 p_9305 p_9306 p_9307 p_9308 p_9309 p_9310 p_9311 p_9312 p_9313 p_9314 p_9315 p_9316 p_9317 p_9318 p_9319 p_9320 p_9321 p_9322 p_9323 p_9324 p_9325 p_9326 p_9327 p_9328 p_9329 p_9330 p_9331 p_9332 p_9333 p_9334 p_9335 p_9336 p_9337 p_9338 p_9339 p_9340 p_9341 p_9342 p_9343 p_9344 p_9345 p_9346 p_9347 p_9348 p_9349 p_9350 p_9351 p_9352 p_9353 p_9354 p_9355 p_9356 p_9357 p_9358 p_9359 p_9360 p_9361 p_9362 p_9363 p_9364 p_9365 p_9366 p_9367 p_9368 p_9369 p_9370 p_9371 p_9372 p_9373 p_9374 p_9375 p_9376 p_9377 p_9378 p_9379 p_9380 p_9381 p_9382 p_9383 p_9384 p_9385 p_9386 p_9387 p_9388 p_9389 p_9390 p_9391 p_9392 p_9393 p_9394 p_9395 p_9396 p_9397 p_9398 p_9399 p_9400 p_9401 p_9402 p_9403 p_9404 p_9405 p_9406 p_9407 p_9408 p_9409 p_9410 p_9411 p_9412 p_9413 p_9414 p_9415 p_9416 p_9417 p_9418 p_9419 p_9420 p_9421 p_9422 p_9423 p_9424 p_9425 p_9426 p_9427 p_9428 p_9429 p_9430 p_9431 p_9432 p_9433 p_9434 p_9435 p_9436 p_9437 p_9438 p_9439 p_9440 p_9441 p_9442 p_9443 p_9444 p_9445 p_9446 p_9447 p_9448 p_9449 p_9450 p_9451 p_9452 p_9453 p_9454 p_9455 p_9456 p_9457 p_9458 p_9459 p_9460 p_9461 p_9462 p_9463 p_9464 p_9465 p_9466 p_9467 p_9468 p_9469 p_9470 p_9471 p_9472 p_9473 p_9474 p_9475 p_9476 p_9477 p_9478 p_9479 p_9480 p_9481 p_9482 p_9483 p_9484 p_9485 p_9486 p_9487 p_9488 p_9489 p_9490 p_9491 p_9492 p_9493 p_9494 p_9495 p_9496 p_9497 p_9498 p_9499 p_9500 p_9501 p_9502 p_9503 p_9504 p_9505 p_9506 p_9507 p_9508 p_9509 p_9510 p_9511 p_9512 p_9513 p_9514 p_9515 p_9516 p_9517 p_9518 p_9519 p_9520 p_9521 p_9522 p_9523 p_9524 p_9525 p_9526 p_9527 p_9528 p_9529 p_9530 p_9531 p_9532 p_9533 p_9534 p_9535 p_9536 p_9537 p_9538 p_9539 p_9540 p_9541 p_9542 p_9543 p_9544 p_9545 p_9546 p_9547 p_9548 p_9549 p_9550 p_9551 p_9552 p_9553 p_9554 p_9555 p_9556 p_9557 p_9558 p_9559 p_9560 p_9561 p_9562 p_9563 p_9564 p_9565 p_9566 p_9567 p_9568 p_9569 p_9570 p_9571 p_9572 p_9573 p_9574 p_9575 p_9576 p_9577 p_9578 p_9579 p_9580 p_9581 p_9582 p_9583 p_9584 p_9585 p_9586 p_9587 p_9588 p_9589 p_9590 p_9591 p_9592 p_9593 p_9594 p_9595 p_9596 p_9597 p_9598 p_9599 p_9600 p_9601 p_9602 p_9603 p_9604 p_9605 p_9606 p_9607 p_9608 p_9609 p_9610 p_9611 p_9612 p_9613 p_9614 p_9615 p_9616 p_9617 p_9618 p_9619 p_9620 p_9621 p_9622 p_9623 p_9624 p_9625 p_9626 p_9627 p_9628 p_9629 p_9630 p_9631 p_9632 p_9633 p_9634 p_9635 p_9636 p_9637 p_9638 p_9639 p_9640 p_9641 p_9642 p_9643 p_9644 p_9645 p_9646 p_9647 p_9648 p_9649 p_9650 p_9651 p_9652 p_9653 p_9654 p_9655 p_9656 p_9657 p_9658 p_9659 p_9660 p_9661 p_9662 p_9663 p_9664 p_9665 p_9666 p_9667 p_9668 p_9669 p_9670 p_9671 p_9672 p_9673 p_9674 p_9675 p_9676 p_9677 p_9678 p_9679 p_9680 p_9681 p_9682 p_9683 p_9684 p_9685 p_9686 p_9687 p_9688 p_9689 p_9690 p_9691 p_9692 p_9693 p_9694 p_9695 p_9696 p_9697 p_9698 p_9699 p_9700 p_9701 p_9702 p_9703 p_9704 p_9705 p_9706 p_9707 p_9708 p_9709 p_9710 p_9711 p_9712 p_9713 p_9714 p_9715 p_9716 p_9717 p_9718 p_9719 p_9720 p_9721 p_9722 p_9723 p_9724 p_9725 p_9726 p_9727 p_9728 p_9729 p_9730 p_9731 p_9732 p_9733 p_9734 p_9735 p_9736 p_9737 p_9738 p_9739 p_9740 p_9741 p_9742 p_9743 p_9744 p_9745 p_9746 p_9747 p_9748 p_9749 p_9750 p_9751 p_9752 p_9753 p_9754 p_9755 p_9756 p_9757 p_9758 p_9759 p_9760 p_9761 p_9762 p_9763 p_9764 p_9765 p_9766 p_9767 p_9768 p_9769 p_9770 p_9771 p_9772 p_9773 p_9774 p_9775 p_9776 p_9777 p_9778 p_9779 p_9780 p_9781 p_9782 p_9783 p_9784 p_9785 p_9786 p_9787 p_9788 p_9789 p_9790 p_9791 p_9792 p_9793 p_9794 p_9795 p_9796 p_9797 p_9798 p_9799 p_9800 p_9801 p_9802 p_9803 p_9804 p_9805 p_9806 p_9807 p_9808 p_9809 p_9810 p_9811 p_9812 p_9813 p_9814 p_9815 p_9816 p_9817 p_9818 p_9819 p_9820 p_9821 p_9822 p_9823 p_9824 p_9825 p_9826 p_9827 p_9828 p_9829 p_9830 p_9831 p_9832 p_9833 p_9834 p_9835 p_9836 p_9837 p_9838 p_9839 p_9840 p_9841 p_9842 p_9843 p_9844 p_9845 p_9846 p_9847 p_9848 p_9849 p_9850 p_9851 p_9852 p_9853 p_9854 p_9855 p_9856 p_9857 p_9858 p_9859 p_9860 p_9861 p_9862 p_9863 p_9864 p_9865 p_9866 p_9867 p_9868 p_9869 p_9870 p_9871 p_9872 p_9873 p_9874 p_9875 p_9876 p_9877 p_9878 p_9879 p_9880 p_9881 p_9882 p_9883 p_9884 p_9885 p_9886 p_9887 p_9888 p_9889 p_9890 p_9891 p_9892 p_9893 p_9894 p_9895 p_9896 p_9897 p_9898 p_9899 p_9900 p_9901 p_9902 p_9903 p_9904 p_9905 p_9906 p_9907 p_9908 p_9909 p_9910 p_9911 p_9912 p_9913 p_9914 p_9915 p_9916 p_9917 p_9918 p_9919 p_9920 p_9921 p_9922 p_9923 p_9924 p_9925 p_9926 p_9927 p_9928 p_9929 p_9930 p_9931 p_9932 p_9933 p_9934 p_9935 p_9936 p_9937 p_9938 p_9939 p_9940 p_9941 p_9942 p_9943 p_9944 p_9945 p_9946 p_9947 p_9948 p_9949 p_9950 p_9951 p_9952 p_9953 p_9954 p_9955 p_9956 p_9957 p_9958 p_9959 p_9960 p_9961 p_9962 p_9963 p_9964 p_9965 p_9966 p_9967 p_9968 p_9969 p_9970 p_9971 p_9972 p_9973 p_9974 p_9975 p_9976 p_9977 p_9978 p_9979 p_9980 p_9981 p_9982 p_9983 p_9984 p_9985 p_9986 p_9987 p_9988 p_9989 p_9990 p_9991 p_9992 p_9993 p_9994 p_9995 p_9996 p_9997 p_9998 p_9999</str>
        </lst>
        <!-- In addition to defaults, "appends" params can be specified
             to identify values which should be appended to the list of
             multi-val params from the query (or the existing "defaults").
          -->
        <!-- In this example, the param "fq=instock:true" would be appended to
             any query time fq params the user may specify, as a mechanism for
             partitioning the index, independent of any user selected filtering
             that may also be desired (perhaps as a result of faceted searching).

             NOTE: there is *absolutely* nothing a client can do to prevent these
             "appends" values from being used, so don't use this mechanism
             unless you are sure you always want it.
          -->
        <!--
           <lst name="appends">
             <str name="fq">inStock:true</str>
           </lst>
          -->
        <!-- "invariants" are a way of letting the Solr maintainer lock down
             the options available to Solr clients.  Any params values
             specified here are used regardless of what values may be specified
             in either the query, the "defaults", or the "appends" params.

             In this example, the facet.field and facet.query params would
             be fixed, limiting the facets clients can use.  Faceting is
             not turned on by default - but if the client does specify
             facet=true in the request, these are the only facets they
             will be able to see counts for; regardless of what other
             facet.field or facet.query params they may specify.

             NOTE: there is *absolutely* nothing a client can do to prevent these
             "invariants" values from being used, so don't use this mechanism
             unless you are sure you always want it.
          -->
        <!--
           <lst name="invariants">
             <str name="facet.field">cat</str>
             <str name="facet.field">manu_exact</str>
             <str name="facet.query">price:[* TO 500]</str>
             <str name="facet.query">price:[500 TO *]</str>
           </lst>
          -->
        <!-- If the default list of SearchComponents is not desired, that
             list can either be overridden completely, or components can be
             prepended or appended to the default list.  (see below)
          -->
        <!--
           <arr name="components">
             <str>nameOfCustomComponent1</str>
             <str>nameOfCustomComponent2</str>
           </arr>
          -->
    </requestHandler>

    <!-- A request handler that returns indented JSON by default -->
    <requestHandler name="/query" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="wt">json</str>
            <str name="indent">true</str>
            <str name="df">default</str>
            <str name="q.op">AND</str>
        </lst>
    </requestHandler>


    <!-- realtime get handler, guaranteed to return the latest stored fields of
         any document, without the need to commit or open a new searcher.  The
         current implementation relies on the updateLog feature being enabled.

         ** WARNING **
         Do NOT disable the realtime get handler at /get if you are using
         SolrCloud otherwise any leader election will cause a full sync in ALL
         replicas for the shard in question. Similarly, a replica recovery will
         also always fetch the complete index from the leader because a partial
         sync will not be possible in the absence of this handler.
    -->
    <requestHandler name="/get" class="solr.RealTimeGetHandler">
        <lst name="defaults">
            <str name="omitHeader">true</str>
            <str name="wt">json</str>
            <str name="indent">true</str>
        </lst>
    </requestHandler>

    <!--
      The export request handler is used to export full sorted result sets.
      Do not change these defaults.
    -->

    <requestHandler name="/export" class="solr.SearchHandler">
        <lst name="invariants">
            <str name="rq">{!xport}</str>
            <str name="wt">xsort</str>
            <str name="distrib">false</str>
        </lst>

        <arr name="components">
            <str>query</str>
        </arr>
    </requestHandler>


    <!-- A Robust Example

         This example SearchHandler declaration shows off usage of the
         SearchHandler with many defaults declared

         Note that multiple instances of the same Request Handler
         (SearchHandler) can be registered multiple times with different
         names (and different init parameters)
      -->
    <requestHandler name="/browse" class="solr.SearchHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>

            <!-- VelocityResponseWriter settings -->
            <str name="wt">velocity</str>
            <str name="v.template">browse</str>
            <str name="v.layout">layout</str>
            <str name="title">Solritas</str>

            <!-- Query settings -->
            <str name="defType">edismax</str>
            <str name="qf">
                text^0.5 features^1.0 name^1.2 sku^1.5 id^10.0 manu^1.1 cat^1.4
                title^10.0 description^5.0 keywords^5.0 author^2.0 resourcename^1.0
            </str>
            <str name="df">text</str>
            <str name="mm">100%</str>
            <str name="q.alt">*:*</str>
            <str name="rows">10</str>
            <str name="fl">*,score</str>

            <str name="mlt.qf">
                text^0.5 features^1.0 name^1.2 sku^1.5 id^10.0 manu^1.1 cat^1.4
                title^10.0 description^5.0 keywords^5.0 author^2.0 resourcename^1.0
            </str>
            <str name="mlt.fl">text,features,name,sku,id,manu,cat,title,description,keywords,author,resourcename</str>
            <int name="mlt.count">3</int>

            <!-- Faceting defaults -->
            <str name="facet">on</str>
            <str name="facet.missing">true</str>
            <str name="facet.field">cat</str>
            <str name="facet.field">manu_exact</str>
            <str name="facet.field">content_type</str>
            <str name="facet.field">author_s</str>
            <str name="facet.query">ipod</str>
            <str name="facet.query">GB</str>
            <str name="facet.mincount">1</str>
            <str name="facet.pivot">cat,inStock</str>
            <str name="facet.range.other">after</str>
            <str name="facet.range">price</str>
            <int name="f.price.facet.range.start">0</int>
            <int name="f.price.facet.range.end">600</int>
            <int name="f.price.facet.range.gap">50</int>
            <str name="facet.range">popularity</str>
            <int name="f.popularity.facet.range.start">0</int>
            <int name="f.popularity.facet.range.end">10</int>
            <int name="f.popularity.facet.range.gap">3</int>
            <str name="facet.range">manufacturedate_dt</str>
            <str name="f.manufacturedate_dt.facet.range.start">NOW/YEAR-10YEARS</str>
            <str name="f.manufacturedate_dt.facet.range.end">NOW</str>
            <str name="f.manufacturedate_dt.facet.range.gap">+1YEAR</str>
            <str name="f.manufacturedate_dt.facet.range.other">before</str>
            <str name="f.manufacturedate_dt.facet.range.other">after</str>

            <!-- Highlighting defaults -->
            <str name="hl">on</str>
            <str name="hl.fl">content features title name</str>
            <str name="hl.preserveMulti">true</str>
            <str name="hl.encoder">html</str>
            <str name="hl.simple.pre">
                <b/>
            </str>
            <str name="hl.simple.post">
                <b/>
            </str>
            <str name="f.title.hl.fragsize">0</str>
            <str name="f.title.hl.alternateField">title</str>
            <str name="f.name.hl.fragsize">0</str>
            <str name="f.name.hl.alternateField">name</str>
            <str name="f.content.hl.snippets">3</str>
            <str name="f.content.hl.fragsize">200</str>
            <str name="f.content.hl.alternateField">content</str>
            <str name="f.content.hl.maxAlternateFieldLength">750</str>

            <!-- Spell checking defaults -->
            <str name="spellcheck">on</str>
            <str name="spellcheck.extendedResults">false</str>
            <str name="spellcheck.count">5</str>
            <str name="spellcheck.alternativeTermCount">2</str>
            <str name="spellcheck.maxResultsForSuggest">5</str>
            <str name="spellcheck.collate">true</str>
            <str name="spellcheck.collateExtendedResults">true</str>
            <str name="spellcheck.maxCollationTries">5</str>
            <str name="spellcheck.maxCollations">3</str>
        </lst>

        <!-- append spellchecking to our list of components -->
        <arr name="last-components">
            <str>spellcheck</str>
        </arr>
    </requestHandler>


    <!-- Update Request Handler.

         http://wiki.apache.org/solr/UpdateXmlMessages

         The canonical Request Handler for Modifying the Index through
         commands specified using XML, JSON, CSV, or JAVABIN

         Note: Since solr1.1 requestHandlers requires a valid content
         type header if posted in the body. For example, curl now
         requires: -H 'Content-type:text/xml; charset=utf-8'

         To override the request content type and force a specific
         Content-type, use the request parameter:
           ?update.contentType=text/csv

         This handler will pick a response format to match the input
         if the 'wt' parameter is not explicit
      -->
    <requestHandler name="/update" class="solr.UpdateRequestHandler">
        <!-- See below for information on defining
             updateRequestProcessorChains that can be used by name
             on each Update Request
          -->
        <!--
           <lst name="defaults">
             <str name="update.chain">dedupe</str>
           </lst>
           -->
    </requestHandler>

    <!-- The following are implicitly added
    <requestHandler name="/update/json" class="solr.UpdateRequestHandler">
          <lst name="defaults">
           <str name="stream.contentType">application/json</str>
         </lst>
    </requestHandler>
    <requestHandler name="/update/csv" class="solr.UpdateRequestHandler">
          <lst name="defaults">
           <str name="stream.contentType">application/csv</str>
         </lst>
    </requestHandler>
    -->

    <!-- Solr Cell Update Request Handler

         http://wiki.apache.org/solr/ExtractingRequestHandler

      -->
    <requestHandler name="/update/extract"
                    startup="lazy"
                    class="solr.extraction.ExtractingRequestHandler">
        <lst name="defaults">
            <str name="lowernames">true</str>
            <str name="uprefix">ignored_</str>

            <!-- capture link hrefs but ignore div attributes -->
            <str name="captureAttr">true</str>
            <str name="fmap.a">links</str>
            <str name="fmap.div">ignored_</str>
        </lst>
    </requestHandler>


    <!-- Field Analysis Request Handler

         RequestHandler that provides much the same functionality as
         analysis.jsp. Provides the ability to specify multiple field
         types and field names in the same request and outputs
         index-time and query-time analysis for each of them.

         Request parameters are:
         analysis.fieldname - field name whose analyzers are to be used

         analysis.fieldtype - field type whose analyzers are to be used
         analysis.fieldvalue - text for index-time analysis
         q (or analysis.q) - text for query time analysis
         analysis.showmatch (true|false) - When set to true and when
             query analysis is performed, the produced tokens of the
             field value analysis will be marked as "matched" for every
             token that is produces by the query analysis
     -->
    <requestHandler name="/analysis/field"
                    startup="lazy"
                    class="solr.FieldAnalysisRequestHandler"/>


    <!-- Document Analysis Handler

         http://wiki.apache.org/solr/AnalysisRequestHandler

         An analysis handler that provides a breakdown of the analysis
         process of provided documents. This handler expects a (single)
         content stream with the following format:

         <docs>
           <doc>
             <field name="id">1</field>
             <field name="name">The Name</field>
             <field name="text">The Text Value</field>
           </doc>
           <doc>...</doc>
           <doc>...</doc>
           ...
         </docs>

      Note: Each document must contain a field which serves as the
      unique key. This key is used in the returned response to associate
      an analysis breakdown to the analyzed document.

      Like the FieldAnalysisRequestHandler, this handler also supports
      query analysis by sending either an "analysis.query" or "q"
      request parameter that holds the query text to be analyzed. It
      also supports the "analysis.showmatch" parameter which when set to
      true, all field tokens that match the query tokens will be marked
      as a "match".
    -->
    <requestHandler name="/analysis/document"
                    class="solr.DocumentAnalysisRequestHandler"
                    startup="lazy"/>

    <!-- Admin Handlers

         Admin Handlers - This will register all the standard admin
         RequestHandlers.
      -->
    <!--<requestHandler name="/admin/"
                    class="solr.admin.AdminHandlers"/>-->
    <!-- This single handler is equivalent to the following... -->
    <!--
       <requestHandler name="/admin/luke"       class="solr.admin.LukeRequestHandler" />
       <requestHandler name="/admin/system"     class="solr.admin.SystemInfoHandler" />
       <requestHandler name="/admin/plugins"    class="solr.admin.PluginInfoHandler" />
       <requestHandler name="/admin/threads"    class="solr.admin.ThreadDumpHandler" />
       <requestHandler name="/admin/properties" class="solr.admin.PropertiesRequestHandler" />
       <requestHandler name="/admin/file"       class="solr.admin.ShowFileRequestHandler" >
      -->
    <!-- If you wish to hide files under ${solr.home}/conf, explicitly
         register the ShowFileRequestHandler using the definition below.
         NOTE: The glob pattern ('*') is the only pattern supported at present, *.xml will
               not exclude all files ending in '.xml'. Use it to exclude _all_ updates
      -->
    <!--
       <requestHandler name="/admin/file"
                       class="solr.admin.ShowFileRequestHandler" >
         <lst name="invariants">
           <str name="hidden">synonyms.txt</str>
           <str name="hidden">anotherfile.txt</str>
           <str name="hidden">*</str>
         </lst>
       </requestHandler>
      -->

    <!-- ping/healthcheck -->
    <requestHandler name="/admin/ping" class="solr.PingRequestHandler">
        <lst name="invariants">
            <str name="q">solrpingquery</str>
        </lst>
        <lst name="defaults">
            <str name="echoParams">all</str>
        </lst>
        <!-- An optional feature of the PingRequestHandler is to configure the
             handler with a "healthcheckFile" which can be used to enable/disable
             the PingRequestHandler.
             relative paths are resolved against the data dir
          -->
        <!-- <str name="healthcheckFile">server-enabled.txt</str> -->
    </requestHandler>

    <!-- Echo the request contents back to the client -->
    <requestHandler name="/debug/dump" class="solr.DumpRequestHandler">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="echoHandler">true</str>
        </lst>
    </requestHandler>

    <!-- Solr Replication

         The SolrReplicationHandler supports replicating indexes from a
         "master" used for indexing and "slaves" used for queries.

         http://wiki.apache.org/solr/SolrReplication

         It is also necessary for SolrCloud to function (in Cloud mode, the
         replication handler is used to bulk transfer segments when nodes
         are added or need to recover).

         https://wiki.apache.org/solr/SolrCloud/
      -->
    <requestHandler name="/replication" class="solr.ReplicationHandler">
        <!--
           To enable simple master/slave replication, uncomment one of the
           sections below, depending on whether this solr instance should be
           the "master" or a "slave".  If this instance is a "slave" you will
           also need to fill in the masterUrl to point to a real machine.
        -->
        <!--
           <lst name="master">
             <str name="replicateAfter">commit</str>
             <str name="replicateAfter">startup</str>
             <str name="confFiles">schema.xml,stopwords.txt</str>
           </lst>
        -->
        <!--
           <lst name="slave">
             <str name="masterUrl">http://your-master-hostname:8983/solr</str>
             <str name="pollInterval">00:00:60</str>
           </lst>
        -->
    </requestHandler>

    <!-- Search Components

         Search components are registered to SolrCore and used by
         instances of SearchHandler (which can access them by name)

         By default, the following components are available:

         <searchComponent name="query"     class="solr.QueryComponent" />
         <searchComponent name="facet"     class="solr.FacetComponent" />
         <searchComponent name="mlt"       class="solr.MoreLikeThisComponent" />
         <searchComponent name="highlight" class="solr.HighlightComponent" />
         <searchComponent name="stats"     class="solr.StatsComponent" />
         <searchComponent name="debug"     class="solr.DebugComponent" />

         Default configuration in a requestHandler would look like:

         <arr name="components">
           <str>query</str>
           <str>facet</str>
           <str>mlt</str>
           <str>highlight</str>
           <str>stats</str>
           <str>debug</str>
         </arr>

         If you register a searchComponent to one of the standard names,
         that will be used instead of the default.

         To insert components before or after the 'standard' components, use:

         <arr name="first-components">
           <str>myFirstComponentName</str>
         </arr>

         <arr name="last-components">
           <str>myLastComponentName</str>
         </arr>

         NOTE: The component registered with the name "debug" will
         always be executed after the "last-components"

       -->

    <!-- Spell Check

         The spell check component can return a list of alternative spelling
         suggestions.

         http://wiki.apache.org/solr/SpellCheckComponent
      -->
    <searchComponent name="spellcheck" class="solr.SpellCheckComponent">

        <str name="queryAnalyzerFieldType">text_general</str>

        <!-- Multiple "Spell Checkers" can be declared and used by this
             component
          -->

        <!-- a spellchecker built from a field of the main index -->
        <lst name="spellchecker">
            <str name="name">default</str>
            <str name="field">text</str>
            <str name="classname">solr.DirectSolrSpellChecker</str>
            <!-- the spellcheck distance measure used, the default is the internal levenshtein -->
            <str name="distanceMeasure">internal</str>
            <!-- minimum accuracy needed to be considered a valid spellcheck suggestion -->
            <float name="accuracy">0.5</float>
            <!-- the maximum #edits we consider when enumerating terms: can be 1 or 2 -->
            <int name="maxEdits">2</int>
            <!-- the minimum shared prefix when enumerating terms -->
            <int name="minPrefix">1</int>
            <!-- maximum number of inspections per result. -->
            <int name="maxInspections">5</int>
            <!-- minimum length of a query term to be considered for correction -->
            <int name="minQueryLength">4</int>
            <!-- maximum threshold of documents a query term can appear to be considered for correction -->
            <float name="maxQueryFrequency">0.01</float>
            <!-- uncomment this to require suggestions to occur in 1% of the documents
                <float name="thresholdTokenFrequency">.01</float>
            -->
        </lst>

        <!-- a spellchecker that can break or combine words.  See "/spell" handler below for usage -->
        <lst name="spellchecker">
            <str name="name">wordbreak</str>
            <str name="classname">solr.WordBreakSolrSpellChecker</str>
            <str name="field">name</str>
            <str name="combineWords">true</str>
            <str name="breakWords">true</str>
            <int name="maxChanges">10</int>
        </lst>

        <!-- a spellchecker that uses a different distance measure -->
        <!--
           <lst name="spellchecker">
             <str name="name">jarowinkler</str>
             <str name="field">spell</str>
             <str name="classname">solr.DirectSolrSpellChecker</str>
             <str name="distanceMeasure">
               org.apache.lucene.search.spell.JaroWinklerDistance
             </str>
           </lst>
         -->

        <!-- a spellchecker that use an alternate comparator

             comparatorClass be one of:
              1. score (default)
              2. freq (Frequency first, then score)
              3. A fully qualified class name
          -->
        <!--
           <lst name="spellchecker">
             <str name="name">freq</str>
             <str name="field">lowerfilt</str>
             <str name="classname">solr.DirectSolrSpellChecker</str>
             <str name="comparatorClass">freq</str>
          -->

        <!-- A spellchecker that reads the list of words from a file -->
        <!--
           <lst name="spellchecker">
             <str name="classname">solr.FileBasedSpellChecker</str>
             <str name="name">file</str>
             <str name="sourceLocation">spellings.txt</str>
             <str name="characterEncoding">UTF-8</str>
             <str name="spellcheckIndexDir">spellcheckerFile</str>
           </lst>
          -->
    </searchComponent>

    <!-- A request handler for demonstrating the spellcheck component.

         NOTE: This is purely as an example.  The whole purpose of the
         SpellCheckComponent is to hook it into the request handler that
         handles your normal user queries so that a separate request is
         not needed to get suggestions.

         IN OTHER WORDS, THERE IS REALLY GOOD CHANCE THE SETUP BELOW IS
         NOT WHAT YOU WANT FOR YOUR PRODUCTION SYSTEM!

         See http://wiki.apache.org/solr/SpellCheckComponent for details
         on the request parameters.
      -->
    <requestHandler name="/spell" class="solr.SearchHandler" startup="lazy">
        <lst name="defaults">
            <str name="df">text</str>
            <!-- Solr will use suggestions from both the 'default' spellchecker
                 and from the 'wordbreak' spellchecker and combine them.
                 collations (re-written queries) can include a combination of
                 corrections from both spellcheckers -->
            <str name="spellcheck.dictionary">default</str>
            <str name="spellcheck.dictionary">wordbreak</str>
            <str name="spellcheck">on</str>
            <str name="spellcheck.extendedResults">true</str>
            <str name="spellcheck.count">10</str>
            <str name="spellcheck.alternativeTermCount">5</str>
            <str name="spellcheck.maxResultsForSuggest">5</str>
            <str name="spellcheck.collate">true</str>
            <str name="spellcheck.collateExtendedResults">true</str>
            <str name="spellcheck.maxCollationTries">10</str>
            <str name="spellcheck.maxCollations">5</str>
        </lst>
        <arr name="last-components">
            <str>spellcheck</str>
        </arr>
    </requestHandler>

    <!-- This causes long startup times on big indexes, even when never used.  See SOLR-6679
    <searchComponent name="suggest" class="solr.SuggestComponent">
      <lst name="suggester">
        <str name="name">mySuggester</str>
        <str name="lookupImpl">FuzzyLookupFactory</str>
        <str name="dictionaryImpl">DocumentDictionaryFactory</str>
        <str name="field">cat</str>
        <str name="weightField">price</str>
        <str name="suggestAnalyzerFieldType">string</str>
      </lst>
    </searchComponent>

    <requestHandler name="/suggest" class="solr.SearchHandler" startup="lazy">
      <lst name="defaults">
        <str name="suggest">true</str>
        <str name="suggest.count">10</str>
      </lst>
      <arr name="components">
        <str>suggest</str>
      </arr>
    </requestHandler>
    -->

    <!-- Term Vector Component

         http://wiki.apache.org/solr/TermVectorComponent
      -->
    <searchComponent name="tvComponent" class="solr.TermVectorComponent"/>

    <!-- A request handler for demonstrating the term vector component

         This is purely as an example.

         In reality you will likely want to add the component to your
         already specified request handlers.
      -->
    <requestHandler name="/tvrh" class="solr.SearchHandler" startup="lazy">
        <lst name="defaults">
            <str name="df">text</str>
            <bool name="tv">true</bool>
        </lst>
        <arr name="last-components">
            <str>tvComponent</str>
        </arr>
    </requestHandler>

    <!-- Clustering Component

         You'll need to set the solr.clustering.enabled system property
         when running solr to run with clustering enabled:

              java -Dsolr.clustering.enabled=true -jar start.jar

         http://wiki.apache.org/solr/ClusteringComponent
         http://carrot2.github.io/solr-integration-strategies/
      -->
    <searchComponent name="clustering"
                     enable="${solr.clustering.enabled:false}"
                     class="solr.clustering.ClusteringComponent">
        <lst name="engine">
            <str name="name">lingo</str>

            <!-- Class name of a clustering algorithm compatible with the Carrot2 framework.

                 Currently available open source algorithms are:
                 * org.carrot2.clustering.lingo.LingoClusteringAlgorithm
                 * org.carrot2.clustering.stc.STCClusteringAlgorithm
                 * org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm

                 See http://project.carrot2.org/algorithms.html for more information.

                 A commercial algorithm Lingo3G (needs to be installed separately) is defined as:
                 * com.carrotsearch.lingo3g.Lingo3GClusteringAlgorithm
              -->
            <str name="carrot.algorithm">org.carrot2.clustering.lingo.LingoClusteringAlgorithm</str>

            <!-- Override location of the clustering algorithm's resources
                 (attribute definitions and lexical resources).

                 A directory from which to load algorithm-specific stop words,
                 stop labels and attribute definition XMLs.

                 For an overview of Carrot2 lexical resources, see:
                 http://download.carrot2.org/head/manual/#chapter.lexical-resources

                 For an overview of Lingo3G lexical resources, see:
                 http://download.carrotsearch.com/lingo3g/manual/#chapter.lexical-resources
             -->
            <str name="carrot.resourcesDir">clustering/carrot2</str>
        </lst>

        <!-- An example definition for the STC clustering algorithm. -->
        <lst name="engine">
            <str name="name">stc</str>
            <str name="carrot.algorithm">org.carrot2.clustering.stc.STCClusteringAlgorithm</str>
        </lst>

        <!-- An example definition for the bisecting kmeans clustering algorithm. -->
        <lst name="engine">
            <str name="name">kmeans</str>
            <str name="carrot.algorithm">org.carrot2.clustering.kmeans.BisectingKMeansClusteringAlgorithm</str>
        </lst>
    </searchComponent>

    <!-- A request handler for demonstrating the clustering component

         This is purely as an example.

         In reality you will likely want to add the component to your
         already specified request handlers.
      -->
    <requestHandler name="/clustering"
                    startup="lazy"
                    enable="${solr.clustering.enabled:false}"
                    class="solr.SearchHandler">
        <lst name="defaults">
            <bool name="clustering">true</bool>
            <bool name="clustering.results">true</bool>
            <!-- Field name with the logical "title" of a each document (optional) -->
            <str name="carrot.title">name</str>
            <!-- Field name with the logical "URL" of a each document (optional) -->
            <str name="carrot.url">id</str>
            <!-- Field name with the logical "content" of a each document (optional) -->
            <str name="carrot.snippet">features</str>
            <!-- Apply highlighter to the title/ content and use this for clustering. -->
            <bool name="carrot.produceSummary">true</bool>
            <!-- the maximum number of labels per cluster -->
            <!--<int name="carrot.numDescriptions">5</int>-->
            <!-- produce sub clusters -->
            <bool name="carrot.outputSubClusters">false</bool>

            <!-- Configure the remaining request handler parameters. -->
            <str name="defType">edismax</str>
            <str name="qf">
                text^0.5 features^1.0 name^1.2 sku^1.5 id^10.0 manu^1.1 cat^1.4
            </str>
            <str name="q.alt">*:*</str>
            <str name="rows">10</str>
            <str name="fl">*,score</str>
        </lst>
        <arr name="last-components">
            <str>clustering</str>
        </arr>
    </requestHandler>

    <!-- Terms Component

         http://wiki.apache.org/solr/TermsComponent

         A component to return terms and document frequency of those
         terms
      -->
    <searchComponent name="terms" class="solr.TermsComponent"/>

    <!-- A request handler for demonstrating the terms component -->
    <requestHandler name="/terms" class="solr.SearchHandler" startup="lazy">
        <lst name="defaults">
            <bool name="terms">true</bool>
            <bool name="distrib">false</bool>
        </lst>
        <arr name="components">
            <str>terms</str>
        </arr>
    </requestHandler>


    <!-- Query Elevation Component

         http://wiki.apache.org/solr/QueryElevationComponent

         a search component that enables you to configure the top
         results for a given query regardless of the normal lucene
         scoring.
      -->
    <searchComponent name="elevator" class="solr.QueryElevationComponent">
        <!-- pick a fieldType to analyze queries -->
        <str name="queryFieldType">string</str>
        <str name="config-file">elevate.xml</str>
    </searchComponent>

    <!-- A request handler for demonstrating the elevator component -->
    <requestHandler name="/elevate" class="solr.SearchHandler" startup="lazy">
        <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="df">text</str>
        </lst>
        <arr name="last-components">
            <str>elevator</str>
        </arr>
    </requestHandler>

    <!-- Highlighting Component

         http://wiki.apache.org/solr/HighlightingParameters
      -->
    <searchComponent class="solr.HighlightComponent" name="highlight">
        <highlighting>
            <!-- Configure the standard fragmenter -->
            <!-- This could most likely be commented out in the "default" case -->
            <fragmenter name="gap"
                        default="true"
                        class="solr.highlight.GapFragmenter">
                <lst name="defaults">
                    <int name="hl.fragsize">100</int>
                </lst>
            </fragmenter>

            <!-- A regular-expression-based fragmenter
                 (for sentence extraction)
              -->
            <fragmenter name="regex"
                        class="solr.highlight.RegexFragmenter">
                <lst name="defaults">
                    <!-- slightly smaller fragsizes work better because of slop -->
                    <int name="hl.fragsize">70</int>
                    <!-- allow 50% slop on fragment sizes -->
                    <float name="hl.regex.slop">0.5</float>
                    <!-- a basic sentence pattern -->
                    <str name="hl.regex.pattern">[-\w ,/\n\"']{20,200}</str>
                </lst>
            </fragmenter>

            <!-- Configure the standard formatter -->
            <formatter name="html"
                       default="true"
                       class="solr.highlight.HtmlFormatter">
                <lst name="defaults">
                    <str name="hl.simple.pre"><![CDATA[<em>]]></str>
                    <str name="hl.simple.post"><![CDATA[</em>]]></str>
                </lst>
            </formatter>

            <!-- Configure the standard encoder -->
            <encoder name="html"
                     class="solr.highlight.HtmlEncoder"/>

            <!-- Configure the standard fragListBuilder -->
            <fragListBuilder name="simple"
                             class="solr.highlight.SimpleFragListBuilder"/>

            <!-- Configure the single fragListBuilder -->
            <fragListBuilder name="single"
                             class="solr.highlight.SingleFragListBuilder"/>

            <!-- Configure the weighted fragListBuilder -->
            <fragListBuilder name="weighted"
                             default="true"
                             class="solr.highlight.WeightedFragListBuilder"/>

            <!-- default tag FragmentsBuilder -->
            <fragmentsBuilder name="default"
                              default="true"
                              class="solr.highlight.ScoreOrderFragmentsBuilder">
                <!--
                <lst name="defaults">
                  <str name="hl.multiValuedSeparatorChar">/</str>
                </lst>
                -->
            </fragmentsBuilder>

            <!-- multi-colored tag FragmentsBuilder -->
            <fragmentsBuilder name="colored"
                              class="solr.highlight.ScoreOrderFragmentsBuilder">
                <lst name="defaults">
                    <str name="hl.tag.pre"><![CDATA[
               <b style="background:yellow">,<b style="background:lawgreen">,
               <b style="background:aquamarine">,<b style="background:magenta">,
               <b style="background:palegreen">,<b style="background:coral">,
               <b style="background:wheat">,<b style="background:khaki">,
               <b style="background:lime">,<b style="background:deepskyblue">]]></str>
                    <str name="hl.tag.post"><![CDATA[</b>]]></str>
                </lst>
            </fragmentsBuilder>

            <boundaryScanner name="default"
                             default="true"
                             class="solr.highlight.SimpleBoundaryScanner">
                <lst name="defaults">
                    <str name="hl.bs.maxScan">10</str>
                    <str name="hl.bs.chars">.,!?

                    </str>
                </lst>
            </boundaryScanner>

            <boundaryScanner name="breakIterator"
                             class="solr.highlight.BreakIteratorBoundaryScanner">
                <lst name="defaults">
                    <!-- type should be one of CHARACTER, WORD(default), LINE and SENTENCE -->
                    <str name="hl.bs.type">WORD</str>
                    <!-- language and country are used when constructing Locale object.  -->
                    <!-- And the Locale object will be used when getting instance of BreakIterator -->
                    <str name="hl.bs.language">en</str>
                    <str name="hl.bs.country">US</str>
                </lst>
            </boundaryScanner>
        </highlighting>
    </searchComponent>

    <!-- Update Processors

         Chains of Update Processor Factories for dealing with Update
         Requests can be declared, and then used by name in Update
         Request Processors

         http://wiki.apache.org/solr/UpdateRequestProcessor

      -->
    <!-- Deduplication

         An example dedup update processor that creates the "id" field
         on the fly based on the hash code of some other fields.  This
         example has overwriteDupes set to false since we are using the
         id field as the signatureField and Solr will maintain
         uniqueness based on that anyway.

      -->
    <!--
       <updateRequestProcessorChain name="dedupe">
         <processor class="solr.processor.SignatureUpdateProcessorFactory">
           <bool name="enabled">true</bool>
           <str name="signatureField">id</str>
           <bool name="overwriteDupes">false</bool>
           <str name="fields">name,features,cat</str>
           <str name="signatureClass">solr.processor.Lookup3Signature</str>
         </processor>
         <processor class="solr.LogUpdateProcessorFactory" />
         <processor class="solr.RunUpdateProcessorFactory" />
       </updateRequestProcessorChain>
      -->

    <!-- Language identification

         This example update chain identifies the language of the incoming
         documents using the langid contrib. The detected language is
         written to field language_s. No field name mapping is done.
         The fields used for detection are text, title, subject and description,
         making this example suitable for detecting languages form full-text
         rich documents injected via ExtractingRequestHandler.
         See more about langId at http://wiki.apache.org/solr/LanguageDetection
      -->
    <!--
     <updateRequestProcessorChain name="langid">
       <processor class="org.apache.solr.update.processor.TikaLanguageIdentifierUpdateProcessorFactory">
         <str name="langid.fl">text,title,subject,description</str>
         <str name="langid.langField">language_s</str>
         <str name="langid.fallback">en</str>
       </processor>
       <processor class="solr.LogUpdateProcessorFactory" />
       <processor class="solr.RunUpdateProcessorFactory" />
     </updateRequestProcessorChain>
    -->

    <!-- Script update processor

      This example hooks in an update processor implemented using JavaScript.

      See more about the script update processor at http://wiki.apache.org/solr/ScriptUpdateProcessor
    -->
    <!--
      <updateRequestProcessorChain name="script">
        <processor class="solr.StatelessScriptUpdateProcessorFactory">
          <str name="script">update-script.js</str>
          <lst name="params">
            <str name="config_param">example config parameter</str>
          </lst>
        </processor>
        <processor class="solr.RunUpdateProcessorFactory" />
      </updateRequestProcessorChain>
    -->

    <!-- Response Writers

         http://wiki.apache.org/solr/QueryResponseWriter

         Request responses will be written using the writer specified by
         the 'wt' request parameter matching the name of a registered
         writer.

         The "default" writer is the default and will be used if 'wt' is
         not specified in the request.
      -->
    <!-- The following response writers are implicitly configured unless
         overridden...
      -->
    <!--
       <queryResponseWriter name="xml"
                            default="true"
                            class="solr.XMLResponseWriter" />
       <queryResponseWriter name="json" class="solr.JSONResponseWriter"/>
       <queryResponseWriter name="python" class="solr.PythonResponseWriter"/>
       <queryResponseWriter name="ruby" class="solr.RubyResponseWriter"/>
       <queryResponseWriter name="php" class="solr.PHPResponseWriter"/>
       <queryResponseWriter name="phps" class="solr.PHPSerializedResponseWriter"/>
       <queryResponseWriter name="csv" class="solr.CSVResponseWriter"/>
       <queryResponseWriter name="schema.xml" class="solr.SchemaXmlResponseWriter"/>
      -->

    <queryResponseWriter name="json" class="solr.JSONResponseWriter">
        <!-- For the purposes of the tutorial, JSON responses are written as
         plain text so that they are easy to read in *any* browser.
         If you expect a MIME type of "application/json" just remove this override.
        -->
        <str name="content-type">text/plain; charset=UTF-8</str>
    </queryResponseWriter>

    <!--
       Custom response writers can be declared as needed...
      -->
    <queryResponseWriter name="velocity" class="solr.VelocityResponseWriter" startup="lazy"/>


    <!-- XSLT response writer transforms the XML output by any xslt file found
         in Solr's conf/xslt directory.  Changes to xslt files are checked for
         every xsltCacheLifetimeSeconds.
      -->
    <queryResponseWriter name="xslt" class="solr.XSLTResponseWriter">
        <int name="xsltCacheLifetimeSeconds">5</int>
    </queryResponseWriter>

    <!-- Query Parsers

         http://wiki.apache.org/solr/SolrQuerySyntax

         Multiple QParserPlugins can be registered by name, and then
         used in either the "defType" param for the QueryComponent (used
         by SearchHandler) or in LocalParams
      -->
    <!-- example of registering a query parser -->
    <!--
       <queryParser name="myparser" class="com.mycompany.MyQParserPlugin"/>
      -->

    <!-- Function Parsers

         http://wiki.apache.org/solr/FunctionQuery

         Multiple ValueSourceParsers can be registered by name, and then
         used as function names when using the "func" QParser.
      -->
    <!-- example of registering a custom function parser  -->
    <!--
       <valueSourceParser name="myfunc"
                          class="com.mycompany.MyValueSourceParser" />
      -->


    <!-- Document Transformers
         http://wiki.apache.org/solr/DocTransformers
      -->
    <!--
       Could be something like:
       <transformer name="db" class="com.mycompany.LoadFromDatabaseTransformer" >
         <int name="connection">jdbc://....</int>
       </transformer>

       To add a constant value to all docs, use:
       <transformer name="mytrans2" class="org.apache.solr.response.transform.ValueAugmenterFactory" >
         <int name="value">5</int>
       </transformer>

       If you want the user to still be able to change it with _value:something_ use this:
       <transformer name="mytrans3" class="org.apache.solr.response.transform.ValueAugmenterFactory" >
         <double name="defaultValue">5</double>
       </transformer>

        If you are using the QueryElevationComponent, you may wish to mark documents that get boosted.  The
        EditorialMarkerFactory will do exactly that:
       <transformer name="qecBooster" class="org.apache.solr.response.transform.EditorialMarkerFactory" />
      -->


    <!-- Legacy config for the admin interface -->
    <admin>
        <defaultQuery>*:*</defaultQuery>
    </admin>

</config>