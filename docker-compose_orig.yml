version: '2.2'
services:


  importer_indexer:
    build:                         # on mac osx based host
      context: ./docker/
      dockerfile: Dockerfile
    user: "${myUID}"
    working_dir: /usr/verticles
    command: ["exec vertx run $VERTICLE_HOME/$INDEXER_VERTICLE"]
    restart: always
    volumes:
      - ./log:$LOG
      - ./src/main/resources:/usr/verticles
    mem_limit: 6GB
    memswap_limit: 12GB
    env_file:
      - ./.env
      - ./indexer.env

  importer_work_converter:
    build:                         # on mac osx based host
      context: ./docker/
      dockerfile: Dockerfile
    user: "${myUID}"
    working_dir: /usr/verticles
    command: ["exec vertx run $VERTICLE_HOME/$CONVERTER_WORK_VERTICLE"]
    restart: always
    volumes:
      - ./log:$LOG
      - ./src/main/resources:/usr/verticles
    mem_limit: 12GB
    memswap_limit: 12GB
    env_file:
      - ./.env
      - ./converter.env

  importer_img_full_converter:
    build:                         # on mac osx based host
      context: ./docker/
      dockerfile: Dockerfile
    user: "${myUID}"
    working_dir: /usr/verticles
    command: ["exec vertx run $VERTICLE_HOME/$CONVERTER_IMG_FULL_VERTICLE"]
    restart: always
    volumes:
      - ./log:$LOG
      - ./src/main/resources:/usr/verticles
    mem_limit: 12GB
    memswap_limit: 12GB
    env_file:
      - ./.env
      - ./converter.env
    environment:
      - CONVERTER_TYPE=full

  importer_img_log_converter:
    build:                         # on mac osx based host
      context: ./docker/
      dockerfile: Dockerfile
    user: "${myUID}"
    working_dir: /usr/verticles
    command: ["exec vertx run $VERTICLE_HOME/$CONVERTER_IMG_LOG_VERTICLE"]
    restart: always
    volumes:
      - ./log:$LOG
      - ./src/main/resources:/usr/verticles
    mem_limit: 12GB
    memswap_limit: 12GB
    env_file:
      - ./.env
      - ./converter.env
    environment:
      - CONVERTER_TYPE=log

  importer_services:
    build:                         # on mac osx based host
      context: ./docker/
      dockerfile: Dockerfile
    user: "${myUID}"
    working_dir: /usr/verticles
    command: ["exec vertx run $VERTICLE_HOME/$SERVICE_VERTICLE"]
    restart: always
    volumes:
      - ./log:$LOG
      - ./src/main/resources:/usr/verticles
    ports:
      - "$SERVICES_EXTERNAL_PORT:$SERVICES_SOLR_PORT"
    mem_limit: 1GB
    env_file:
      - ./.env
      - ./services.env

  solr:
    build: docker/solr/
    container_name: mets_importer_solr
    restart: always
    ports:
      - "$SOLR_GDZ_EXTERNAL_PORT:$SOLR_GDZ_PORT"
    volumes:
      - solrdata_core1:/opt/solr/server/solr/mycores/<solr_gdz_core>/data/
      - solrdata_core2:/opt/solr/server/solr/mycores/<solr_gdz_core2>/data/
      - ./docker/solr/config/sub/core.properties:/opt/solr/server/solr/mycores/<solr_gdz_core>/core.properties
      - ./docker/solr/config/sub/core2.properties:/opt/solr/server/solr/mycores/<solr_gdz_core2>/core.properties
    mem_limit: 8GB
    env_file:
      - ./.env
    environment:
      - SOLR_JAVA_MEM=$SOLR_JAVA_MEM


  redis:
    image: redis:4.0
    command: redis-server --appendonly yes
    container_name: mets_importer_redis
    restart: always
    ports:
      - "$REDIS_EXTERNAL_PORT:$REDIS_PORT"
    volumes:
      - redisdata/:/data/
    mem_limit: 6GB
    env_file:
      - ./.env
    environment:
      - JAVA_OPTS=$REDIS_JAVA_OPTS


volumes:
  solrdata_core1:
  solrdata_core2:
  redisdata:

